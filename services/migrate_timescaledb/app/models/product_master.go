// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductMaster is an object representing the database table.
type ProductMaster struct {
	Date        null.Int    `boil:"date" json:"date,omitempty" toml:"date" yaml:"date,omitempty"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Asin        null.String `boil:"asin" json:"asin,omitempty" toml:"asin" yaml:"asin,omitempty"`
	Jan         null.String `boil:"jan" json:"jan,omitempty" toml:"jan" yaml:"jan,omitempty"`
	Sku         string      `boil:"sku" json:"sku" toml:"sku" yaml:"sku"`
	Fnsku       null.String `boil:"fnsku" json:"fnsku,omitempty" toml:"fnsku" yaml:"fnsku,omitempty"`
	DangerClass null.String `boil:"danger_class" json:"danger_class,omitempty" toml:"danger_class" yaml:"danger_class,omitempty"`
	SellPrice   null.Int    `boil:"sell_price" json:"sell_price,omitempty" toml:"sell_price" yaml:"sell_price,omitempty"`
	CostPrice   null.Int    `boil:"cost_price" json:"cost_price,omitempty" toml:"cost_price" yaml:"cost_price,omitempty"`

	R *productMasterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productMasterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductMasterColumns = struct {
	Date        string
	Name        string
	Asin        string
	Jan         string
	Sku         string
	Fnsku       string
	DangerClass string
	SellPrice   string
	CostPrice   string
}{
	Date:        "date",
	Name:        "name",
	Asin:        "asin",
	Jan:         "jan",
	Sku:         "sku",
	Fnsku:       "fnsku",
	DangerClass: "danger_class",
	SellPrice:   "sell_price",
	CostPrice:   "cost_price",
}

var ProductMasterTableColumns = struct {
	Date        string
	Name        string
	Asin        string
	Jan         string
	Sku         string
	Fnsku       string
	DangerClass string
	SellPrice   string
	CostPrice   string
}{
	Date:        "product_master.date",
	Name:        "product_master.name",
	Asin:        "product_master.asin",
	Jan:         "product_master.jan",
	Sku:         "product_master.sku",
	Fnsku:       "product_master.fnsku",
	DangerClass: "product_master.danger_class",
	SellPrice:   "product_master.sell_price",
	CostPrice:   "product_master.cost_price",
}

// Generated where

var ProductMasterWhere = struct {
	Date        whereHelpernull_Int
	Name        whereHelpernull_String
	Asin        whereHelpernull_String
	Jan         whereHelpernull_String
	Sku         whereHelperstring
	Fnsku       whereHelpernull_String
	DangerClass whereHelpernull_String
	SellPrice   whereHelpernull_Int
	CostPrice   whereHelpernull_Int
}{
	Date:        whereHelpernull_Int{field: "\"product_master\".\"date\""},
	Name:        whereHelpernull_String{field: "\"product_master\".\"name\""},
	Asin:        whereHelpernull_String{field: "\"product_master\".\"asin\""},
	Jan:         whereHelpernull_String{field: "\"product_master\".\"jan\""},
	Sku:         whereHelperstring{field: "\"product_master\".\"sku\""},
	Fnsku:       whereHelpernull_String{field: "\"product_master\".\"fnsku\""},
	DangerClass: whereHelpernull_String{field: "\"product_master\".\"danger_class\""},
	SellPrice:   whereHelpernull_Int{field: "\"product_master\".\"sell_price\""},
	CostPrice:   whereHelpernull_Int{field: "\"product_master\".\"cost_price\""},
}

// ProductMasterRels is where relationship names are stored.
var ProductMasterRels = struct {
}{}

// productMasterR is where relationships are stored.
type productMasterR struct {
}

// NewStruct creates a new relationship struct
func (*productMasterR) NewStruct() *productMasterR {
	return &productMasterR{}
}

// productMasterL is where Load methods for each relationship are stored.
type productMasterL struct{}

var (
	productMasterAllColumns            = []string{"date", "name", "asin", "jan", "sku", "fnsku", "danger_class", "sell_price", "cost_price"}
	productMasterColumnsWithoutDefault = []string{"sku"}
	productMasterColumnsWithDefault    = []string{"date", "name", "asin", "jan", "fnsku", "danger_class", "sell_price", "cost_price"}
	productMasterPrimaryKeyColumns     = []string{"sku"}
	productMasterGeneratedColumns      = []string{}
)

type (
	// ProductMasterSlice is an alias for a slice of pointers to ProductMaster.
	// This should almost always be used instead of []ProductMaster.
	ProductMasterSlice []*ProductMaster
	// ProductMasterHook is the signature for custom ProductMaster hook methods
	ProductMasterHook func(context.Context, boil.ContextExecutor, *ProductMaster) error

	productMasterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productMasterType                 = reflect.TypeOf(&ProductMaster{})
	productMasterMapping              = queries.MakeStructMapping(productMasterType)
	productMasterPrimaryKeyMapping, _ = queries.BindMapping(productMasterType, productMasterMapping, productMasterPrimaryKeyColumns)
	productMasterInsertCacheMut       sync.RWMutex
	productMasterInsertCache          = make(map[string]insertCache)
	productMasterUpdateCacheMut       sync.RWMutex
	productMasterUpdateCache          = make(map[string]updateCache)
	productMasterUpsertCacheMut       sync.RWMutex
	productMasterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productMasterAfterSelectHooks []ProductMasterHook

var productMasterBeforeInsertHooks []ProductMasterHook
var productMasterAfterInsertHooks []ProductMasterHook

var productMasterBeforeUpdateHooks []ProductMasterHook
var productMasterAfterUpdateHooks []ProductMasterHook

var productMasterBeforeDeleteHooks []ProductMasterHook
var productMasterAfterDeleteHooks []ProductMasterHook

var productMasterBeforeUpsertHooks []ProductMasterHook
var productMasterAfterUpsertHooks []ProductMasterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductMaster) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductMaster) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductMaster) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductMaster) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductMaster) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductMaster) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductMaster) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductMaster) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductMaster) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMasterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductMasterHook registers your hook function for all future operations.
func AddProductMasterHook(hookPoint boil.HookPoint, productMasterHook ProductMasterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productMasterAfterSelectHooks = append(productMasterAfterSelectHooks, productMasterHook)
	case boil.BeforeInsertHook:
		productMasterBeforeInsertHooks = append(productMasterBeforeInsertHooks, productMasterHook)
	case boil.AfterInsertHook:
		productMasterAfterInsertHooks = append(productMasterAfterInsertHooks, productMasterHook)
	case boil.BeforeUpdateHook:
		productMasterBeforeUpdateHooks = append(productMasterBeforeUpdateHooks, productMasterHook)
	case boil.AfterUpdateHook:
		productMasterAfterUpdateHooks = append(productMasterAfterUpdateHooks, productMasterHook)
	case boil.BeforeDeleteHook:
		productMasterBeforeDeleteHooks = append(productMasterBeforeDeleteHooks, productMasterHook)
	case boil.AfterDeleteHook:
		productMasterAfterDeleteHooks = append(productMasterAfterDeleteHooks, productMasterHook)
	case boil.BeforeUpsertHook:
		productMasterBeforeUpsertHooks = append(productMasterBeforeUpsertHooks, productMasterHook)
	case boil.AfterUpsertHook:
		productMasterAfterUpsertHooks = append(productMasterAfterUpsertHooks, productMasterHook)
	}
}

// One returns a single productMaster record from the query.
func (q productMasterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductMaster, error) {
	o := &ProductMaster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_master")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductMaster records from the query.
func (q productMasterQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductMasterSlice, error) {
	var o []*ProductMaster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductMaster slice")
	}

	if len(productMasterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductMaster records in the query.
func (q productMasterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_master rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productMasterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_master exists")
	}

	return count > 0, nil
}

// ProductMasters retrieves all the records using an executor.
func ProductMasters(mods ...qm.QueryMod) productMasterQuery {
	mods = append(mods, qm.From("\"product_master\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_master\".*"})
	}

	return productMasterQuery{q}
}

// FindProductMaster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductMaster(ctx context.Context, exec boil.ContextExecutor, sku string, selectCols ...string) (*ProductMaster, error) {
	productMasterObj := &ProductMaster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_master\" where \"sku\"=$1", sel,
	)

	q := queries.Raw(query, sku)

	err := q.Bind(ctx, exec, productMasterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_master")
	}

	if err = productMasterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productMasterObj, err
	}

	return productMasterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductMaster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_master provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productMasterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productMasterInsertCacheMut.RLock()
	cache, cached := productMasterInsertCache[key]
	productMasterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productMasterAllColumns,
			productMasterColumnsWithDefault,
			productMasterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productMasterType, productMasterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productMasterType, productMasterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_master\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_master\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_master")
	}

	if !cached {
		productMasterInsertCacheMut.Lock()
		productMasterInsertCache[key] = cache
		productMasterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductMaster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductMaster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productMasterUpdateCacheMut.RLock()
	cache, cached := productMasterUpdateCache[key]
	productMasterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productMasterAllColumns,
			productMasterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_master, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_master\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productMasterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productMasterType, productMasterMapping, append(wl, productMasterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_master row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_master")
	}

	if !cached {
		productMasterUpdateCacheMut.Lock()
		productMasterUpdateCache[key] = cache
		productMasterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productMasterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_master")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_master")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductMasterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_master\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productMasterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productMaster")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductMaster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_master provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productMasterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productMasterUpsertCacheMut.RLock()
	cache, cached := productMasterUpsertCache[key]
	productMasterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productMasterAllColumns,
			productMasterColumnsWithDefault,
			productMasterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productMasterAllColumns,
			productMasterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_master, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productMasterPrimaryKeyColumns))
			copy(conflict, productMasterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_master\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productMasterType, productMasterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productMasterType, productMasterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_master")
	}

	if !cached {
		productMasterUpsertCacheMut.Lock()
		productMasterUpsertCache[key] = cache
		productMasterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductMaster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductMaster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductMaster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productMasterPrimaryKeyMapping)
	sql := "DELETE FROM \"product_master\" WHERE \"sku\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_master")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_master")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productMasterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productMasterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_master")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_master")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductMasterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productMasterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_master\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productMasterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_master")
	}

	if len(productMasterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductMaster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductMaster(ctx, exec, o.Sku)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductMasterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductMasterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_master\".* FROM \"product_master\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productMasterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductMasterSlice")
	}

	*o = slice

	return nil
}

// ProductMasterExists checks if the ProductMaster row exists.
func ProductMasterExists(ctx context.Context, exec boil.ContextExecutor, sku string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_master\" where \"sku\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sku)
	}
	row := exec.QueryRowContext(ctx, sql, sku)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_master exists")
	}

	return exists, nil
}

// Exists checks if the ProductMaster row exists.
func (o *ProductMaster) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductMasterExists(ctx, exec, o.Sku)
}
