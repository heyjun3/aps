// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Inactivestock is an object representing the database table.
type Inactivestock struct {
	SKU  string      `boil:"SKU" json:"SKU" toml:"SKU" yaml:"SKU"`
	Asin null.String `boil:"asin" json:"asin,omitempty" toml:"asin" yaml:"asin,omitempty"`

	R *inactivestockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inactivestockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InactivestockColumns = struct {
	SKU  string
	Asin string
}{
	SKU:  "SKU",
	Asin: "asin",
}

var InactivestockTableColumns = struct {
	SKU  string
	Asin string
}{
	SKU:  "inactivestock.SKU",
	Asin: "inactivestock.asin",
}

// Generated where

var InactivestockWhere = struct {
	SKU  whereHelperstring
	Asin whereHelpernull_String
}{
	SKU:  whereHelperstring{field: "\"inactivestock\".\"SKU\""},
	Asin: whereHelpernull_String{field: "\"inactivestock\".\"asin\""},
}

// InactivestockRels is where relationship names are stored.
var InactivestockRels = struct {
}{}

// inactivestockR is where relationships are stored.
type inactivestockR struct {
}

// NewStruct creates a new relationship struct
func (*inactivestockR) NewStruct() *inactivestockR {
	return &inactivestockR{}
}

// inactivestockL is where Load methods for each relationship are stored.
type inactivestockL struct{}

var (
	inactivestockAllColumns            = []string{"SKU", "asin"}
	inactivestockColumnsWithoutDefault = []string{"SKU"}
	inactivestockColumnsWithDefault    = []string{"asin"}
	inactivestockPrimaryKeyColumns     = []string{"SKU"}
	inactivestockGeneratedColumns      = []string{}
)

type (
	// InactivestockSlice is an alias for a slice of pointers to Inactivestock.
	// This should almost always be used instead of []Inactivestock.
	InactivestockSlice []*Inactivestock
	// InactivestockHook is the signature for custom Inactivestock hook methods
	InactivestockHook func(context.Context, boil.ContextExecutor, *Inactivestock) error

	inactivestockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inactivestockType                 = reflect.TypeOf(&Inactivestock{})
	inactivestockMapping              = queries.MakeStructMapping(inactivestockType)
	inactivestockPrimaryKeyMapping, _ = queries.BindMapping(inactivestockType, inactivestockMapping, inactivestockPrimaryKeyColumns)
	inactivestockInsertCacheMut       sync.RWMutex
	inactivestockInsertCache          = make(map[string]insertCache)
	inactivestockUpdateCacheMut       sync.RWMutex
	inactivestockUpdateCache          = make(map[string]updateCache)
	inactivestockUpsertCacheMut       sync.RWMutex
	inactivestockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inactivestockAfterSelectHooks []InactivestockHook

var inactivestockBeforeInsertHooks []InactivestockHook
var inactivestockAfterInsertHooks []InactivestockHook

var inactivestockBeforeUpdateHooks []InactivestockHook
var inactivestockAfterUpdateHooks []InactivestockHook

var inactivestockBeforeDeleteHooks []InactivestockHook
var inactivestockAfterDeleteHooks []InactivestockHook

var inactivestockBeforeUpsertHooks []InactivestockHook
var inactivestockAfterUpsertHooks []InactivestockHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Inactivestock) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Inactivestock) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Inactivestock) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Inactivestock) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Inactivestock) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Inactivestock) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Inactivestock) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Inactivestock) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Inactivestock) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inactivestockAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInactivestockHook registers your hook function for all future operations.
func AddInactivestockHook(hookPoint boil.HookPoint, inactivestockHook InactivestockHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		inactivestockAfterSelectHooks = append(inactivestockAfterSelectHooks, inactivestockHook)
	case boil.BeforeInsertHook:
		inactivestockBeforeInsertHooks = append(inactivestockBeforeInsertHooks, inactivestockHook)
	case boil.AfterInsertHook:
		inactivestockAfterInsertHooks = append(inactivestockAfterInsertHooks, inactivestockHook)
	case boil.BeforeUpdateHook:
		inactivestockBeforeUpdateHooks = append(inactivestockBeforeUpdateHooks, inactivestockHook)
	case boil.AfterUpdateHook:
		inactivestockAfterUpdateHooks = append(inactivestockAfterUpdateHooks, inactivestockHook)
	case boil.BeforeDeleteHook:
		inactivestockBeforeDeleteHooks = append(inactivestockBeforeDeleteHooks, inactivestockHook)
	case boil.AfterDeleteHook:
		inactivestockAfterDeleteHooks = append(inactivestockAfterDeleteHooks, inactivestockHook)
	case boil.BeforeUpsertHook:
		inactivestockBeforeUpsertHooks = append(inactivestockBeforeUpsertHooks, inactivestockHook)
	case boil.AfterUpsertHook:
		inactivestockAfterUpsertHooks = append(inactivestockAfterUpsertHooks, inactivestockHook)
	}
}

// One returns a single inactivestock record from the query.
func (q inactivestockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Inactivestock, error) {
	o := &Inactivestock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for inactivestock")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Inactivestock records from the query.
func (q inactivestockQuery) All(ctx context.Context, exec boil.ContextExecutor) (InactivestockSlice, error) {
	var o []*Inactivestock

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Inactivestock slice")
	}

	if len(inactivestockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Inactivestock records in the query.
func (q inactivestockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count inactivestock rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inactivestockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if inactivestock exists")
	}

	return count > 0, nil
}

// Inactivestocks retrieves all the records using an executor.
func Inactivestocks(mods ...qm.QueryMod) inactivestockQuery {
	mods = append(mods, qm.From("\"inactivestock\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inactivestock\".*"})
	}

	return inactivestockQuery{q}
}

// FindInactivestock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInactivestock(ctx context.Context, exec boil.ContextExecutor, sKU string, selectCols ...string) (*Inactivestock, error) {
	inactivestockObj := &Inactivestock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inactivestock\" where \"SKU\"=$1", sel,
	)

	q := queries.Raw(query, sKU)

	err := q.Bind(ctx, exec, inactivestockObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from inactivestock")
	}

	if err = inactivestockObj.doAfterSelectHooks(ctx, exec); err != nil {
		return inactivestockObj, err
	}

	return inactivestockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Inactivestock) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inactivestock provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inactivestockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inactivestockInsertCacheMut.RLock()
	cache, cached := inactivestockInsertCache[key]
	inactivestockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inactivestockAllColumns,
			inactivestockColumnsWithDefault,
			inactivestockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inactivestockType, inactivestockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inactivestockType, inactivestockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inactivestock\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inactivestock\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into inactivestock")
	}

	if !cached {
		inactivestockInsertCacheMut.Lock()
		inactivestockInsertCache[key] = cache
		inactivestockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Inactivestock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Inactivestock) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inactivestockUpdateCacheMut.RLock()
	cache, cached := inactivestockUpdateCache[key]
	inactivestockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inactivestockAllColumns,
			inactivestockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update inactivestock, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inactivestock\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, inactivestockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inactivestockType, inactivestockMapping, append(wl, inactivestockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update inactivestock row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for inactivestock")
	}

	if !cached {
		inactivestockUpdateCacheMut.Lock()
		inactivestockUpdateCache[key] = cache
		inactivestockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inactivestockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for inactivestock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for inactivestock")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InactivestockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inactivestockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inactivestock\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, inactivestockPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inactivestock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inactivestock")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Inactivestock) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inactivestock provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inactivestockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inactivestockUpsertCacheMut.RLock()
	cache, cached := inactivestockUpsertCache[key]
	inactivestockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inactivestockAllColumns,
			inactivestockColumnsWithDefault,
			inactivestockColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			inactivestockAllColumns,
			inactivestockPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert inactivestock, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(inactivestockPrimaryKeyColumns))
			copy(conflict, inactivestockPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inactivestock\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(inactivestockType, inactivestockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inactivestockType, inactivestockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert inactivestock")
	}

	if !cached {
		inactivestockUpsertCacheMut.Lock()
		inactivestockUpsertCache[key] = cache
		inactivestockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Inactivestock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Inactivestock) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Inactivestock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inactivestockPrimaryKeyMapping)
	sql := "DELETE FROM \"inactivestock\" WHERE \"SKU\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from inactivestock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for inactivestock")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inactivestockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inactivestockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inactivestock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inactivestock")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InactivestockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inactivestockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inactivestockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inactivestock\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inactivestockPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inactivestock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inactivestock")
	}

	if len(inactivestockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Inactivestock) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInactivestock(ctx, exec, o.SKU)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InactivestockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InactivestockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inactivestockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inactivestock\".* FROM \"inactivestock\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inactivestockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InactivestockSlice")
	}

	*o = slice

	return nil
}

// InactivestockExists checks if the Inactivestock row exists.
func InactivestockExists(ctx context.Context, exec boil.ContextExecutor, sKU string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inactivestock\" where \"SKU\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sKU)
	}
	row := exec.QueryRowContext(ctx, sql, sKU)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if inactivestock exists")
	}

	return exists, nil
}

// Exists checks if the Inactivestock row exists.
func (o *Inactivestock) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InactivestockExists(ctx, exec, o.SKU)
}
