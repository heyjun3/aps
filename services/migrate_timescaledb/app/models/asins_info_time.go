// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AsinsInfoTime is an object representing the database table.
type AsinsInfoTime struct {
	Time  time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	Asin  string    `boil:"asin" json:"asin" toml:"asin" yaml:"asin"`
	Price null.Int  `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Rank  null.Int  `boil:"rank" json:"rank,omitempty" toml:"rank" yaml:"rank,omitempty"`

	R *asinsInfoTimeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L asinsInfoTimeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AsinsInfoTimeColumns = struct {
	Time  string
	Asin  string
	Price string
	Rank  string
}{
	Time:  "time",
	Asin:  "asin",
	Price: "price",
	Rank:  "rank",
}

var AsinsInfoTimeTableColumns = struct {
	Time  string
	Asin  string
	Price string
	Rank  string
}{
	Time:  "asins_info_time.time",
	Asin:  "asins_info_time.asin",
	Price: "asins_info_time.price",
	Rank:  "asins_info_time.rank",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AsinsInfoTimeWhere = struct {
	Time  whereHelpertime_Time
	Asin  whereHelperstring
	Price whereHelpernull_Int
	Rank  whereHelpernull_Int
}{
	Time:  whereHelpertime_Time{field: "\"asins_info_time\".\"time\""},
	Asin:  whereHelperstring{field: "\"asins_info_time\".\"asin\""},
	Price: whereHelpernull_Int{field: "\"asins_info_time\".\"price\""},
	Rank:  whereHelpernull_Int{field: "\"asins_info_time\".\"rank\""},
}

// AsinsInfoTimeRels is where relationship names are stored.
var AsinsInfoTimeRels = struct {
}{}

// asinsInfoTimeR is where relationships are stored.
type asinsInfoTimeR struct {
}

// NewStruct creates a new relationship struct
func (*asinsInfoTimeR) NewStruct() *asinsInfoTimeR {
	return &asinsInfoTimeR{}
}

// asinsInfoTimeL is where Load methods for each relationship are stored.
type asinsInfoTimeL struct{}

var (
	asinsInfoTimeAllColumns            = []string{"time", "asin", "price", "rank"}
	asinsInfoTimeColumnsWithoutDefault = []string{"time", "asin"}
	asinsInfoTimeColumnsWithDefault    = []string{"price", "rank"}
	asinsInfoTimePrimaryKeyColumns     = []string{"time", "asin"}
	asinsInfoTimeGeneratedColumns      = []string{}
)

type (
	// AsinsInfoTimeSlice is an alias for a slice of pointers to AsinsInfoTime.
	// This should almost always be used instead of []AsinsInfoTime.
	AsinsInfoTimeSlice []*AsinsInfoTime
	// AsinsInfoTimeHook is the signature for custom AsinsInfoTime hook methods
	AsinsInfoTimeHook func(context.Context, boil.ContextExecutor, *AsinsInfoTime) error

	asinsInfoTimeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	asinsInfoTimeType                 = reflect.TypeOf(&AsinsInfoTime{})
	asinsInfoTimeMapping              = queries.MakeStructMapping(asinsInfoTimeType)
	asinsInfoTimePrimaryKeyMapping, _ = queries.BindMapping(asinsInfoTimeType, asinsInfoTimeMapping, asinsInfoTimePrimaryKeyColumns)
	asinsInfoTimeInsertCacheMut       sync.RWMutex
	asinsInfoTimeInsertCache          = make(map[string]insertCache)
	asinsInfoTimeUpdateCacheMut       sync.RWMutex
	asinsInfoTimeUpdateCache          = make(map[string]updateCache)
	asinsInfoTimeUpsertCacheMut       sync.RWMutex
	asinsInfoTimeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var asinsInfoTimeAfterSelectHooks []AsinsInfoTimeHook

var asinsInfoTimeBeforeInsertHooks []AsinsInfoTimeHook
var asinsInfoTimeAfterInsertHooks []AsinsInfoTimeHook

var asinsInfoTimeBeforeUpdateHooks []AsinsInfoTimeHook
var asinsInfoTimeAfterUpdateHooks []AsinsInfoTimeHook

var asinsInfoTimeBeforeDeleteHooks []AsinsInfoTimeHook
var asinsInfoTimeAfterDeleteHooks []AsinsInfoTimeHook

var asinsInfoTimeBeforeUpsertHooks []AsinsInfoTimeHook
var asinsInfoTimeAfterUpsertHooks []AsinsInfoTimeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AsinsInfoTime) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AsinsInfoTime) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AsinsInfoTime) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AsinsInfoTime) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AsinsInfoTime) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AsinsInfoTime) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AsinsInfoTime) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AsinsInfoTime) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AsinsInfoTime) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoTimeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAsinsInfoTimeHook registers your hook function for all future operations.
func AddAsinsInfoTimeHook(hookPoint boil.HookPoint, asinsInfoTimeHook AsinsInfoTimeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		asinsInfoTimeAfterSelectHooks = append(asinsInfoTimeAfterSelectHooks, asinsInfoTimeHook)
	case boil.BeforeInsertHook:
		asinsInfoTimeBeforeInsertHooks = append(asinsInfoTimeBeforeInsertHooks, asinsInfoTimeHook)
	case boil.AfterInsertHook:
		asinsInfoTimeAfterInsertHooks = append(asinsInfoTimeAfterInsertHooks, asinsInfoTimeHook)
	case boil.BeforeUpdateHook:
		asinsInfoTimeBeforeUpdateHooks = append(asinsInfoTimeBeforeUpdateHooks, asinsInfoTimeHook)
	case boil.AfterUpdateHook:
		asinsInfoTimeAfterUpdateHooks = append(asinsInfoTimeAfterUpdateHooks, asinsInfoTimeHook)
	case boil.BeforeDeleteHook:
		asinsInfoTimeBeforeDeleteHooks = append(asinsInfoTimeBeforeDeleteHooks, asinsInfoTimeHook)
	case boil.AfterDeleteHook:
		asinsInfoTimeAfterDeleteHooks = append(asinsInfoTimeAfterDeleteHooks, asinsInfoTimeHook)
	case boil.BeforeUpsertHook:
		asinsInfoTimeBeforeUpsertHooks = append(asinsInfoTimeBeforeUpsertHooks, asinsInfoTimeHook)
	case boil.AfterUpsertHook:
		asinsInfoTimeAfterUpsertHooks = append(asinsInfoTimeAfterUpsertHooks, asinsInfoTimeHook)
	}
}

// One returns a single asinsInfoTime record from the query.
func (q asinsInfoTimeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AsinsInfoTime, error) {
	o := &AsinsInfoTime{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for asins_info_time")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AsinsInfoTime records from the query.
func (q asinsInfoTimeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AsinsInfoTimeSlice, error) {
	var o []*AsinsInfoTime

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AsinsInfoTime slice")
	}

	if len(asinsInfoTimeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AsinsInfoTime records in the query.
func (q asinsInfoTimeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count asins_info_time rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q asinsInfoTimeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if asins_info_time exists")
	}

	return count > 0, nil
}

// AsinsInfoTimes retrieves all the records using an executor.
func AsinsInfoTimes(mods ...qm.QueryMod) asinsInfoTimeQuery {
	mods = append(mods, qm.From("\"asins_info_time\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"asins_info_time\".*"})
	}

	return asinsInfoTimeQuery{q}
}

// FindAsinsInfoTime retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAsinsInfoTime(ctx context.Context, exec boil.ContextExecutor, time time.Time, asin string, selectCols ...string) (*AsinsInfoTime, error) {
	asinsInfoTimeObj := &AsinsInfoTime{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asins_info_time\" where \"time\"=$1 AND \"asin\"=$2", sel,
	)

	q := queries.Raw(query, time, asin)

	err := q.Bind(ctx, exec, asinsInfoTimeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from asins_info_time")
	}

	if err = asinsInfoTimeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return asinsInfoTimeObj, err
	}

	return asinsInfoTimeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AsinsInfoTime) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asins_info_time provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asinsInfoTimeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	asinsInfoTimeInsertCacheMut.RLock()
	cache, cached := asinsInfoTimeInsertCache[key]
	asinsInfoTimeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			asinsInfoTimeAllColumns,
			asinsInfoTimeColumnsWithDefault,
			asinsInfoTimeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(asinsInfoTimeType, asinsInfoTimeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(asinsInfoTimeType, asinsInfoTimeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asins_info_time\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asins_info_time\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into asins_info_time")
	}

	if !cached {
		asinsInfoTimeInsertCacheMut.Lock()
		asinsInfoTimeInsertCache[key] = cache
		asinsInfoTimeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AsinsInfoTime.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AsinsInfoTime) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	asinsInfoTimeUpdateCacheMut.RLock()
	cache, cached := asinsInfoTimeUpdateCache[key]
	asinsInfoTimeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			asinsInfoTimeAllColumns,
			asinsInfoTimePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update asins_info_time, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asins_info_time\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, asinsInfoTimePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(asinsInfoTimeType, asinsInfoTimeMapping, append(wl, asinsInfoTimePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update asins_info_time row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for asins_info_time")
	}

	if !cached {
		asinsInfoTimeUpdateCacheMut.Lock()
		asinsInfoTimeUpdateCache[key] = cache
		asinsInfoTimeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q asinsInfoTimeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for asins_info_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for asins_info_time")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AsinsInfoTimeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asinsInfoTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asins_info_time\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, asinsInfoTimePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in asinsInfoTime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all asinsInfoTime")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AsinsInfoTime) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asins_info_time provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asinsInfoTimeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	asinsInfoTimeUpsertCacheMut.RLock()
	cache, cached := asinsInfoTimeUpsertCache[key]
	asinsInfoTimeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			asinsInfoTimeAllColumns,
			asinsInfoTimeColumnsWithDefault,
			asinsInfoTimeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			asinsInfoTimeAllColumns,
			asinsInfoTimePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert asins_info_time, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(asinsInfoTimePrimaryKeyColumns))
			copy(conflict, asinsInfoTimePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asins_info_time\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(asinsInfoTimeType, asinsInfoTimeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(asinsInfoTimeType, asinsInfoTimeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert asins_info_time")
	}

	if !cached {
		asinsInfoTimeUpsertCacheMut.Lock()
		asinsInfoTimeUpsertCache[key] = cache
		asinsInfoTimeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AsinsInfoTime record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AsinsInfoTime) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AsinsInfoTime provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), asinsInfoTimePrimaryKeyMapping)
	sql := "DELETE FROM \"asins_info_time\" WHERE \"time\"=$1 AND \"asin\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from asins_info_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for asins_info_time")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q asinsInfoTimeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no asinsInfoTimeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asins_info_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asins_info_time")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AsinsInfoTimeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(asinsInfoTimeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asinsInfoTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asins_info_time\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asinsInfoTimePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asinsInfoTime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asins_info_time")
	}

	if len(asinsInfoTimeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AsinsInfoTime) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAsinsInfoTime(ctx, exec, o.Time, o.Asin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AsinsInfoTimeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AsinsInfoTimeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asinsInfoTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asins_info_time\".* FROM \"asins_info_time\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asinsInfoTimePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AsinsInfoTimeSlice")
	}

	*o = slice

	return nil
}

// AsinsInfoTimeExists checks if the AsinsInfoTime row exists.
func AsinsInfoTimeExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, asin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asins_info_time\" where \"time\"=$1 AND \"asin\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, asin)
	}
	row := exec.QueryRowContext(ctx, sql, time, asin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if asins_info_time exists")
	}

	return exists, nil
}

// Exists checks if the AsinsInfoTime row exists.
func (o *AsinsInfoTime) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AsinsInfoTimeExists(ctx, exec, o.Time, o.Asin)
}
