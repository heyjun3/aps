// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInactivestocks(t *testing.T) {
	t.Parallel()

	query := Inactivestocks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInactivestocksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInactivestocksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Inactivestocks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInactivestocksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InactivestockSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInactivestocksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InactivestockExists(ctx, tx, o.SKU)
	if err != nil {
		t.Errorf("Unable to check if Inactivestock exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InactivestockExists to return true, but got false.")
	}
}

func testInactivestocksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	inactivestockFound, err := FindInactivestock(ctx, tx, o.SKU)
	if err != nil {
		t.Error(err)
	}

	if inactivestockFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInactivestocksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Inactivestocks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInactivestocksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Inactivestocks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInactivestocksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inactivestockOne := &Inactivestock{}
	inactivestockTwo := &Inactivestock{}
	if err = randomize.Struct(seed, inactivestockOne, inactivestockDBTypes, false, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}
	if err = randomize.Struct(seed, inactivestockTwo, inactivestockDBTypes, false, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inactivestockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inactivestockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Inactivestocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInactivestocksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inactivestockOne := &Inactivestock{}
	inactivestockTwo := &Inactivestock{}
	if err = randomize.Struct(seed, inactivestockOne, inactivestockDBTypes, false, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}
	if err = randomize.Struct(seed, inactivestockTwo, inactivestockDBTypes, false, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inactivestockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inactivestockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func inactivestockBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func inactivestockAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Inactivestock) error {
	*o = Inactivestock{}
	return nil
}

func testInactivestocksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Inactivestock{}
	o := &Inactivestock{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inactivestockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Inactivestock object: %s", err)
	}

	AddInactivestockHook(boil.BeforeInsertHook, inactivestockBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inactivestockBeforeInsertHooks = []InactivestockHook{}

	AddInactivestockHook(boil.AfterInsertHook, inactivestockAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inactivestockAfterInsertHooks = []InactivestockHook{}

	AddInactivestockHook(boil.AfterSelectHook, inactivestockAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inactivestockAfterSelectHooks = []InactivestockHook{}

	AddInactivestockHook(boil.BeforeUpdateHook, inactivestockBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inactivestockBeforeUpdateHooks = []InactivestockHook{}

	AddInactivestockHook(boil.AfterUpdateHook, inactivestockAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inactivestockAfterUpdateHooks = []InactivestockHook{}

	AddInactivestockHook(boil.BeforeDeleteHook, inactivestockBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inactivestockBeforeDeleteHooks = []InactivestockHook{}

	AddInactivestockHook(boil.AfterDeleteHook, inactivestockAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inactivestockAfterDeleteHooks = []InactivestockHook{}

	AddInactivestockHook(boil.BeforeUpsertHook, inactivestockBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inactivestockBeforeUpsertHooks = []InactivestockHook{}

	AddInactivestockHook(boil.AfterUpsertHook, inactivestockAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inactivestockAfterUpsertHooks = []InactivestockHook{}
}

func testInactivestocksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInactivestocksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(inactivestockColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInactivestocksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInactivestocksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InactivestockSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInactivestocksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Inactivestocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inactivestockDBTypes = map[string]string{`SKU`: `character varying`, `Asin`: `character varying`}
	_                    = bytes.MinRead
)

func testInactivestocksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(inactivestockPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(inactivestockAllColumns) == len(inactivestockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInactivestocksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inactivestockAllColumns) == len(inactivestockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Inactivestock{}
	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inactivestockDBTypes, true, inactivestockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inactivestockAllColumns, inactivestockPrimaryKeyColumns) {
		fields = inactivestockAllColumns
	} else {
		fields = strmangle.SetComplement(
			inactivestockAllColumns,
			inactivestockPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InactivestockSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInactivestocksUpsert(t *testing.T) {
	t.Parallel()

	if len(inactivestockAllColumns) == len(inactivestockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Inactivestock{}
	if err = randomize.Struct(seed, &o, inactivestockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Inactivestock: %s", err)
	}

	count, err := Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, inactivestockDBTypes, false, inactivestockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Inactivestock struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Inactivestock: %s", err)
	}

	count, err = Inactivestocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
