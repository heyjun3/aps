// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfos)
	t.Run("BuffaloProducts", testBuffaloProducts)
	t.Run("Favoriteproducts", testFavoriteproducts)
	t.Run("IkebeProducts", testIkebeProducts)
	t.Run("Inactivestocks", testInactivestocks)
	t.Run("KeepaProducts", testKeepaProducts)
	t.Run("MWSProducts", testMWSProducts)
	t.Run("NetseaProducts", testNetseaProducts)
	t.Run("NetseaShops", testNetseaShops)
	t.Run("Pc4uProducts", testPc4uProducts)
	t.Run("ProductMasters", testProductMasters)
	t.Run("RakutenProducts", testRakutenProducts)
	t.Run("SpapiFees", testSpapiFees)
	t.Run("SpapiPrices", testSpapiPrices)
	t.Run("Stocks", testStocks)
	t.Run("SuperProductDetails", testSuperProductDetails)
	t.Run("SuperProducts", testSuperProducts)
	t.Run("SuperShops", testSuperShops)
}

func TestDelete(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosDelete)
	t.Run("BuffaloProducts", testBuffaloProductsDelete)
	t.Run("Favoriteproducts", testFavoriteproductsDelete)
	t.Run("IkebeProducts", testIkebeProductsDelete)
	t.Run("Inactivestocks", testInactivestocksDelete)
	t.Run("KeepaProducts", testKeepaProductsDelete)
	t.Run("MWSProducts", testMWSProductsDelete)
	t.Run("NetseaProducts", testNetseaProductsDelete)
	t.Run("NetseaShops", testNetseaShopsDelete)
	t.Run("Pc4uProducts", testPc4uProductsDelete)
	t.Run("ProductMasters", testProductMastersDelete)
	t.Run("RakutenProducts", testRakutenProductsDelete)
	t.Run("SpapiFees", testSpapiFeesDelete)
	t.Run("SpapiPrices", testSpapiPricesDelete)
	t.Run("Stocks", testStocksDelete)
	t.Run("SuperProductDetails", testSuperProductDetailsDelete)
	t.Run("SuperProducts", testSuperProductsDelete)
	t.Run("SuperShops", testSuperShopsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosQueryDeleteAll)
	t.Run("BuffaloProducts", testBuffaloProductsQueryDeleteAll)
	t.Run("Favoriteproducts", testFavoriteproductsQueryDeleteAll)
	t.Run("IkebeProducts", testIkebeProductsQueryDeleteAll)
	t.Run("Inactivestocks", testInactivestocksQueryDeleteAll)
	t.Run("KeepaProducts", testKeepaProductsQueryDeleteAll)
	t.Run("MWSProducts", testMWSProductsQueryDeleteAll)
	t.Run("NetseaProducts", testNetseaProductsQueryDeleteAll)
	t.Run("NetseaShops", testNetseaShopsQueryDeleteAll)
	t.Run("Pc4uProducts", testPc4uProductsQueryDeleteAll)
	t.Run("ProductMasters", testProductMastersQueryDeleteAll)
	t.Run("RakutenProducts", testRakutenProductsQueryDeleteAll)
	t.Run("SpapiFees", testSpapiFeesQueryDeleteAll)
	t.Run("SpapiPrices", testSpapiPricesQueryDeleteAll)
	t.Run("Stocks", testStocksQueryDeleteAll)
	t.Run("SuperProductDetails", testSuperProductDetailsQueryDeleteAll)
	t.Run("SuperProducts", testSuperProductsQueryDeleteAll)
	t.Run("SuperShops", testSuperShopsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosSliceDeleteAll)
	t.Run("BuffaloProducts", testBuffaloProductsSliceDeleteAll)
	t.Run("Favoriteproducts", testFavoriteproductsSliceDeleteAll)
	t.Run("IkebeProducts", testIkebeProductsSliceDeleteAll)
	t.Run("Inactivestocks", testInactivestocksSliceDeleteAll)
	t.Run("KeepaProducts", testKeepaProductsSliceDeleteAll)
	t.Run("MWSProducts", testMWSProductsSliceDeleteAll)
	t.Run("NetseaProducts", testNetseaProductsSliceDeleteAll)
	t.Run("NetseaShops", testNetseaShopsSliceDeleteAll)
	t.Run("Pc4uProducts", testPc4uProductsSliceDeleteAll)
	t.Run("ProductMasters", testProductMastersSliceDeleteAll)
	t.Run("RakutenProducts", testRakutenProductsSliceDeleteAll)
	t.Run("SpapiFees", testSpapiFeesSliceDeleteAll)
	t.Run("SpapiPrices", testSpapiPricesSliceDeleteAll)
	t.Run("Stocks", testStocksSliceDeleteAll)
	t.Run("SuperProductDetails", testSuperProductDetailsSliceDeleteAll)
	t.Run("SuperProducts", testSuperProductsSliceDeleteAll)
	t.Run("SuperShops", testSuperShopsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosExists)
	t.Run("BuffaloProducts", testBuffaloProductsExists)
	t.Run("Favoriteproducts", testFavoriteproductsExists)
	t.Run("IkebeProducts", testIkebeProductsExists)
	t.Run("Inactivestocks", testInactivestocksExists)
	t.Run("KeepaProducts", testKeepaProductsExists)
	t.Run("MWSProducts", testMWSProductsExists)
	t.Run("NetseaProducts", testNetseaProductsExists)
	t.Run("NetseaShops", testNetseaShopsExists)
	t.Run("Pc4uProducts", testPc4uProductsExists)
	t.Run("ProductMasters", testProductMastersExists)
	t.Run("RakutenProducts", testRakutenProductsExists)
	t.Run("SpapiFees", testSpapiFeesExists)
	t.Run("SpapiPrices", testSpapiPricesExists)
	t.Run("Stocks", testStocksExists)
	t.Run("SuperProductDetails", testSuperProductDetailsExists)
	t.Run("SuperProducts", testSuperProductsExists)
	t.Run("SuperShops", testSuperShopsExists)
}

func TestFind(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosFind)
	t.Run("BuffaloProducts", testBuffaloProductsFind)
	t.Run("Favoriteproducts", testFavoriteproductsFind)
	t.Run("IkebeProducts", testIkebeProductsFind)
	t.Run("Inactivestocks", testInactivestocksFind)
	t.Run("KeepaProducts", testKeepaProductsFind)
	t.Run("MWSProducts", testMWSProductsFind)
	t.Run("NetseaProducts", testNetseaProductsFind)
	t.Run("NetseaShops", testNetseaShopsFind)
	t.Run("Pc4uProducts", testPc4uProductsFind)
	t.Run("ProductMasters", testProductMastersFind)
	t.Run("RakutenProducts", testRakutenProductsFind)
	t.Run("SpapiFees", testSpapiFeesFind)
	t.Run("SpapiPrices", testSpapiPricesFind)
	t.Run("Stocks", testStocksFind)
	t.Run("SuperProductDetails", testSuperProductDetailsFind)
	t.Run("SuperProducts", testSuperProductsFind)
	t.Run("SuperShops", testSuperShopsFind)
}

func TestBind(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosBind)
	t.Run("BuffaloProducts", testBuffaloProductsBind)
	t.Run("Favoriteproducts", testFavoriteproductsBind)
	t.Run("IkebeProducts", testIkebeProductsBind)
	t.Run("Inactivestocks", testInactivestocksBind)
	t.Run("KeepaProducts", testKeepaProductsBind)
	t.Run("MWSProducts", testMWSProductsBind)
	t.Run("NetseaProducts", testNetseaProductsBind)
	t.Run("NetseaShops", testNetseaShopsBind)
	t.Run("Pc4uProducts", testPc4uProductsBind)
	t.Run("ProductMasters", testProductMastersBind)
	t.Run("RakutenProducts", testRakutenProductsBind)
	t.Run("SpapiFees", testSpapiFeesBind)
	t.Run("SpapiPrices", testSpapiPricesBind)
	t.Run("Stocks", testStocksBind)
	t.Run("SuperProductDetails", testSuperProductDetailsBind)
	t.Run("SuperProducts", testSuperProductsBind)
	t.Run("SuperShops", testSuperShopsBind)
}

func TestOne(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosOne)
	t.Run("BuffaloProducts", testBuffaloProductsOne)
	t.Run("Favoriteproducts", testFavoriteproductsOne)
	t.Run("IkebeProducts", testIkebeProductsOne)
	t.Run("Inactivestocks", testInactivestocksOne)
	t.Run("KeepaProducts", testKeepaProductsOne)
	t.Run("MWSProducts", testMWSProductsOne)
	t.Run("NetseaProducts", testNetseaProductsOne)
	t.Run("NetseaShops", testNetseaShopsOne)
	t.Run("Pc4uProducts", testPc4uProductsOne)
	t.Run("ProductMasters", testProductMastersOne)
	t.Run("RakutenProducts", testRakutenProductsOne)
	t.Run("SpapiFees", testSpapiFeesOne)
	t.Run("SpapiPrices", testSpapiPricesOne)
	t.Run("Stocks", testStocksOne)
	t.Run("SuperProductDetails", testSuperProductDetailsOne)
	t.Run("SuperProducts", testSuperProductsOne)
	t.Run("SuperShops", testSuperShopsOne)
}

func TestAll(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosAll)
	t.Run("BuffaloProducts", testBuffaloProductsAll)
	t.Run("Favoriteproducts", testFavoriteproductsAll)
	t.Run("IkebeProducts", testIkebeProductsAll)
	t.Run("Inactivestocks", testInactivestocksAll)
	t.Run("KeepaProducts", testKeepaProductsAll)
	t.Run("MWSProducts", testMWSProductsAll)
	t.Run("NetseaProducts", testNetseaProductsAll)
	t.Run("NetseaShops", testNetseaShopsAll)
	t.Run("Pc4uProducts", testPc4uProductsAll)
	t.Run("ProductMasters", testProductMastersAll)
	t.Run("RakutenProducts", testRakutenProductsAll)
	t.Run("SpapiFees", testSpapiFeesAll)
	t.Run("SpapiPrices", testSpapiPricesAll)
	t.Run("Stocks", testStocksAll)
	t.Run("SuperProductDetails", testSuperProductDetailsAll)
	t.Run("SuperProducts", testSuperProductsAll)
	t.Run("SuperShops", testSuperShopsAll)
}

func TestCount(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosCount)
	t.Run("BuffaloProducts", testBuffaloProductsCount)
	t.Run("Favoriteproducts", testFavoriteproductsCount)
	t.Run("IkebeProducts", testIkebeProductsCount)
	t.Run("Inactivestocks", testInactivestocksCount)
	t.Run("KeepaProducts", testKeepaProductsCount)
	t.Run("MWSProducts", testMWSProductsCount)
	t.Run("NetseaProducts", testNetseaProductsCount)
	t.Run("NetseaShops", testNetseaShopsCount)
	t.Run("Pc4uProducts", testPc4uProductsCount)
	t.Run("ProductMasters", testProductMastersCount)
	t.Run("RakutenProducts", testRakutenProductsCount)
	t.Run("SpapiFees", testSpapiFeesCount)
	t.Run("SpapiPrices", testSpapiPricesCount)
	t.Run("Stocks", testStocksCount)
	t.Run("SuperProductDetails", testSuperProductDetailsCount)
	t.Run("SuperProducts", testSuperProductsCount)
	t.Run("SuperShops", testSuperShopsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosHooks)
	t.Run("BuffaloProducts", testBuffaloProductsHooks)
	t.Run("Favoriteproducts", testFavoriteproductsHooks)
	t.Run("IkebeProducts", testIkebeProductsHooks)
	t.Run("Inactivestocks", testInactivestocksHooks)
	t.Run("KeepaProducts", testKeepaProductsHooks)
	t.Run("MWSProducts", testMWSProductsHooks)
	t.Run("NetseaProducts", testNetseaProductsHooks)
	t.Run("NetseaShops", testNetseaShopsHooks)
	t.Run("Pc4uProducts", testPc4uProductsHooks)
	t.Run("ProductMasters", testProductMastersHooks)
	t.Run("RakutenProducts", testRakutenProductsHooks)
	t.Run("SpapiFees", testSpapiFeesHooks)
	t.Run("SpapiPrices", testSpapiPricesHooks)
	t.Run("Stocks", testStocksHooks)
	t.Run("SuperProductDetails", testSuperProductDetailsHooks)
	t.Run("SuperProducts", testSuperProductsHooks)
	t.Run("SuperShops", testSuperShopsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosInsert)
	t.Run("AsinsInfos", testAsinsInfosInsertWhitelist)
	t.Run("BuffaloProducts", testBuffaloProductsInsert)
	t.Run("BuffaloProducts", testBuffaloProductsInsertWhitelist)
	t.Run("Favoriteproducts", testFavoriteproductsInsert)
	t.Run("Favoriteproducts", testFavoriteproductsInsertWhitelist)
	t.Run("IkebeProducts", testIkebeProductsInsert)
	t.Run("IkebeProducts", testIkebeProductsInsertWhitelist)
	t.Run("Inactivestocks", testInactivestocksInsert)
	t.Run("Inactivestocks", testInactivestocksInsertWhitelist)
	t.Run("KeepaProducts", testKeepaProductsInsert)
	t.Run("KeepaProducts", testKeepaProductsInsertWhitelist)
	t.Run("MWSProducts", testMWSProductsInsert)
	t.Run("MWSProducts", testMWSProductsInsertWhitelist)
	t.Run("NetseaProducts", testNetseaProductsInsert)
	t.Run("NetseaProducts", testNetseaProductsInsertWhitelist)
	t.Run("NetseaShops", testNetseaShopsInsert)
	t.Run("NetseaShops", testNetseaShopsInsertWhitelist)
	t.Run("Pc4uProducts", testPc4uProductsInsert)
	t.Run("Pc4uProducts", testPc4uProductsInsertWhitelist)
	t.Run("ProductMasters", testProductMastersInsert)
	t.Run("ProductMasters", testProductMastersInsertWhitelist)
	t.Run("RakutenProducts", testRakutenProductsInsert)
	t.Run("RakutenProducts", testRakutenProductsInsertWhitelist)
	t.Run("SpapiFees", testSpapiFeesInsert)
	t.Run("SpapiFees", testSpapiFeesInsertWhitelist)
	t.Run("SpapiPrices", testSpapiPricesInsert)
	t.Run("SpapiPrices", testSpapiPricesInsertWhitelist)
	t.Run("Stocks", testStocksInsert)
	t.Run("Stocks", testStocksInsertWhitelist)
	t.Run("SuperProductDetails", testSuperProductDetailsInsert)
	t.Run("SuperProductDetails", testSuperProductDetailsInsertWhitelist)
	t.Run("SuperProducts", testSuperProductsInsert)
	t.Run("SuperProducts", testSuperProductsInsertWhitelist)
	t.Run("SuperShops", testSuperShopsInsert)
	t.Run("SuperShops", testSuperShopsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("SpapiFeeToAsinsInfoUsingAsinAsinsInfo", testSpapiFeeToOneAsinsInfoUsingAsinAsinsInfo)
	t.Run("SpapiPriceToAsinsInfoUsingAsinAsinsInfo", testSpapiPriceToOneAsinsInfoUsingAsinAsinsInfo)
	t.Run("SuperProductDetailToSuperProductUsingProductCodeSuperProduct", testSuperProductDetailToOneSuperProductUsingProductCodeSuperProduct)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("AsinsInfoToSpapiFeeUsingAsinSpapiFee", testAsinsInfoOneToOneSpapiFeeUsingAsinSpapiFee)
	t.Run("AsinsInfoToSpapiPriceUsingAsinSpapiPrice", testAsinsInfoOneToOneSpapiPriceUsingAsinSpapiPrice)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("SuperProductToProductCodeSuperProductDetails", testSuperProductToManyProductCodeSuperProductDetails)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("SpapiFeeToAsinsInfoUsingAsinSpapiFee", testSpapiFeeToOneSetOpAsinsInfoUsingAsinAsinsInfo)
	t.Run("SpapiPriceToAsinsInfoUsingAsinSpapiPrice", testSpapiPriceToOneSetOpAsinsInfoUsingAsinAsinsInfo)
	t.Run("SuperProductDetailToSuperProductUsingProductCodeSuperProductDetails", testSuperProductDetailToOneSetOpSuperProductUsingProductCodeSuperProduct)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("AsinsInfoToSpapiFeeUsingAsinSpapiFee", testAsinsInfoOneToOneSetOpSpapiFeeUsingAsinSpapiFee)
	t.Run("AsinsInfoToSpapiPriceUsingAsinSpapiPrice", testAsinsInfoOneToOneSetOpSpapiPriceUsingAsinSpapiPrice)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("SuperProductToProductCodeSuperProductDetails", testSuperProductToManyAddOpProductCodeSuperProductDetails)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosReload)
	t.Run("BuffaloProducts", testBuffaloProductsReload)
	t.Run("Favoriteproducts", testFavoriteproductsReload)
	t.Run("IkebeProducts", testIkebeProductsReload)
	t.Run("Inactivestocks", testInactivestocksReload)
	t.Run("KeepaProducts", testKeepaProductsReload)
	t.Run("MWSProducts", testMWSProductsReload)
	t.Run("NetseaProducts", testNetseaProductsReload)
	t.Run("NetseaShops", testNetseaShopsReload)
	t.Run("Pc4uProducts", testPc4uProductsReload)
	t.Run("ProductMasters", testProductMastersReload)
	t.Run("RakutenProducts", testRakutenProductsReload)
	t.Run("SpapiFees", testSpapiFeesReload)
	t.Run("SpapiPrices", testSpapiPricesReload)
	t.Run("Stocks", testStocksReload)
	t.Run("SuperProductDetails", testSuperProductDetailsReload)
	t.Run("SuperProducts", testSuperProductsReload)
	t.Run("SuperShops", testSuperShopsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosReloadAll)
	t.Run("BuffaloProducts", testBuffaloProductsReloadAll)
	t.Run("Favoriteproducts", testFavoriteproductsReloadAll)
	t.Run("IkebeProducts", testIkebeProductsReloadAll)
	t.Run("Inactivestocks", testInactivestocksReloadAll)
	t.Run("KeepaProducts", testKeepaProductsReloadAll)
	t.Run("MWSProducts", testMWSProductsReloadAll)
	t.Run("NetseaProducts", testNetseaProductsReloadAll)
	t.Run("NetseaShops", testNetseaShopsReloadAll)
	t.Run("Pc4uProducts", testPc4uProductsReloadAll)
	t.Run("ProductMasters", testProductMastersReloadAll)
	t.Run("RakutenProducts", testRakutenProductsReloadAll)
	t.Run("SpapiFees", testSpapiFeesReloadAll)
	t.Run("SpapiPrices", testSpapiPricesReloadAll)
	t.Run("Stocks", testStocksReloadAll)
	t.Run("SuperProductDetails", testSuperProductDetailsReloadAll)
	t.Run("SuperProducts", testSuperProductsReloadAll)
	t.Run("SuperShops", testSuperShopsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosSelect)
	t.Run("BuffaloProducts", testBuffaloProductsSelect)
	t.Run("Favoriteproducts", testFavoriteproductsSelect)
	t.Run("IkebeProducts", testIkebeProductsSelect)
	t.Run("Inactivestocks", testInactivestocksSelect)
	t.Run("KeepaProducts", testKeepaProductsSelect)
	t.Run("MWSProducts", testMWSProductsSelect)
	t.Run("NetseaProducts", testNetseaProductsSelect)
	t.Run("NetseaShops", testNetseaShopsSelect)
	t.Run("Pc4uProducts", testPc4uProductsSelect)
	t.Run("ProductMasters", testProductMastersSelect)
	t.Run("RakutenProducts", testRakutenProductsSelect)
	t.Run("SpapiFees", testSpapiFeesSelect)
	t.Run("SpapiPrices", testSpapiPricesSelect)
	t.Run("Stocks", testStocksSelect)
	t.Run("SuperProductDetails", testSuperProductDetailsSelect)
	t.Run("SuperProducts", testSuperProductsSelect)
	t.Run("SuperShops", testSuperShopsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosUpdate)
	t.Run("BuffaloProducts", testBuffaloProductsUpdate)
	t.Run("Favoriteproducts", testFavoriteproductsUpdate)
	t.Run("IkebeProducts", testIkebeProductsUpdate)
	t.Run("Inactivestocks", testInactivestocksUpdate)
	t.Run("KeepaProducts", testKeepaProductsUpdate)
	t.Run("MWSProducts", testMWSProductsUpdate)
	t.Run("NetseaProducts", testNetseaProductsUpdate)
	t.Run("NetseaShops", testNetseaShopsUpdate)
	t.Run("Pc4uProducts", testPc4uProductsUpdate)
	t.Run("ProductMasters", testProductMastersUpdate)
	t.Run("RakutenProducts", testRakutenProductsUpdate)
	t.Run("SpapiFees", testSpapiFeesUpdate)
	t.Run("SpapiPrices", testSpapiPricesUpdate)
	t.Run("Stocks", testStocksUpdate)
	t.Run("SuperProductDetails", testSuperProductDetailsUpdate)
	t.Run("SuperProducts", testSuperProductsUpdate)
	t.Run("SuperShops", testSuperShopsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AsinsInfos", testAsinsInfosSliceUpdateAll)
	t.Run("BuffaloProducts", testBuffaloProductsSliceUpdateAll)
	t.Run("Favoriteproducts", testFavoriteproductsSliceUpdateAll)
	t.Run("IkebeProducts", testIkebeProductsSliceUpdateAll)
	t.Run("Inactivestocks", testInactivestocksSliceUpdateAll)
	t.Run("KeepaProducts", testKeepaProductsSliceUpdateAll)
	t.Run("MWSProducts", testMWSProductsSliceUpdateAll)
	t.Run("NetseaProducts", testNetseaProductsSliceUpdateAll)
	t.Run("NetseaShops", testNetseaShopsSliceUpdateAll)
	t.Run("Pc4uProducts", testPc4uProductsSliceUpdateAll)
	t.Run("ProductMasters", testProductMastersSliceUpdateAll)
	t.Run("RakutenProducts", testRakutenProductsSliceUpdateAll)
	t.Run("SpapiFees", testSpapiFeesSliceUpdateAll)
	t.Run("SpapiPrices", testSpapiPricesSliceUpdateAll)
	t.Run("Stocks", testStocksSliceUpdateAll)
	t.Run("SuperProductDetails", testSuperProductDetailsSliceUpdateAll)
	t.Run("SuperProducts", testSuperProductsSliceUpdateAll)
	t.Run("SuperShops", testSuperShopsSliceUpdateAll)
}
