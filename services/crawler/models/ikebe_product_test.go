// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIkebeProducts(t *testing.T) {
	t.Parallel()

	query := IkebeProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIkebeProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIkebeProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IkebeProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIkebeProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IkebeProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIkebeProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IkebeProductExists(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Errorf("Unable to check if IkebeProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IkebeProductExists to return true, but got false.")
	}
}

func testIkebeProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ikebeProductFound, err := FindIkebeProduct(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Error(err)
	}

	if ikebeProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIkebeProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IkebeProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIkebeProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IkebeProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIkebeProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ikebeProductOne := &IkebeProduct{}
	ikebeProductTwo := &IkebeProduct{}
	if err = randomize.Struct(seed, ikebeProductOne, ikebeProductDBTypes, false, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, ikebeProductTwo, ikebeProductDBTypes, false, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ikebeProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ikebeProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IkebeProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIkebeProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ikebeProductOne := &IkebeProduct{}
	ikebeProductTwo := &IkebeProduct{}
	if err = randomize.Struct(seed, ikebeProductOne, ikebeProductDBTypes, false, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, ikebeProductTwo, ikebeProductDBTypes, false, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ikebeProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ikebeProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ikebeProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func ikebeProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IkebeProduct) error {
	*o = IkebeProduct{}
	return nil
}

func testIkebeProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IkebeProduct{}
	o := &IkebeProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IkebeProduct object: %s", err)
	}

	AddIkebeProductHook(boil.BeforeInsertHook, ikebeProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ikebeProductBeforeInsertHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.AfterInsertHook, ikebeProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ikebeProductAfterInsertHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.AfterSelectHook, ikebeProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ikebeProductAfterSelectHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.BeforeUpdateHook, ikebeProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ikebeProductBeforeUpdateHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.AfterUpdateHook, ikebeProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ikebeProductAfterUpdateHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.BeforeDeleteHook, ikebeProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ikebeProductBeforeDeleteHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.AfterDeleteHook, ikebeProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ikebeProductAfterDeleteHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.BeforeUpsertHook, ikebeProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ikebeProductBeforeUpsertHooks = []IkebeProductHook{}

	AddIkebeProductHook(boil.AfterUpsertHook, ikebeProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ikebeProductAfterUpsertHooks = []IkebeProductHook{}
}

func testIkebeProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIkebeProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ikebeProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIkebeProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIkebeProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IkebeProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIkebeProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IkebeProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ikebeProductDBTypes = map[string]string{`Name`: `character varying`, `Jan`: `character varying`, `Price`: `bigint`, `ShopCode`: `character varying`, `ProductCode`: `character varying`, `URL`: `character varying`}
	_                   = bytes.MinRead
)

func testIkebeProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ikebeProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ikebeProductAllColumns) == len(ikebeProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIkebeProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ikebeProductAllColumns) == len(ikebeProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IkebeProduct{}
	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ikebeProductDBTypes, true, ikebeProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ikebeProductAllColumns, ikebeProductPrimaryKeyColumns) {
		fields = ikebeProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			ikebeProductAllColumns,
			ikebeProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IkebeProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIkebeProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(ikebeProductAllColumns) == len(ikebeProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IkebeProduct{}
	if err = randomize.Struct(seed, &o, ikebeProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IkebeProduct: %s", err)
	}

	count, err := IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ikebeProductDBTypes, false, ikebeProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IkebeProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IkebeProduct: %s", err)
	}

	count, err = IkebeProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
