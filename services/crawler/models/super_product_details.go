// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SuperProductDetail is an object representing the database table.
type SuperProductDetail struct {
	ProductCode string      `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	SetNumber   int         `boil:"set_number" json:"set_number" toml:"set_number" yaml:"set_number"`
	ShopCode    null.String `boil:"shop_code" json:"shop_code,omitempty" toml:"shop_code" yaml:"shop_code,omitempty"`
	Price       null.Int64  `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Jan         null.String `boil:"jan" json:"jan,omitempty" toml:"jan" yaml:"jan,omitempty"`

	R *superProductDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L superProductDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SuperProductDetailColumns = struct {
	ProductCode string
	SetNumber   string
	ShopCode    string
	Price       string
	Jan         string
}{
	ProductCode: "product_code",
	SetNumber:   "set_number",
	ShopCode:    "shop_code",
	Price:       "price",
	Jan:         "jan",
}

var SuperProductDetailTableColumns = struct {
	ProductCode string
	SetNumber   string
	ShopCode    string
	Price       string
	Jan         string
}{
	ProductCode: "super_product_details.product_code",
	SetNumber:   "super_product_details.set_number",
	ShopCode:    "super_product_details.shop_code",
	Price:       "super_product_details.price",
	Jan:         "super_product_details.jan",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SuperProductDetailWhere = struct {
	ProductCode whereHelperstring
	SetNumber   whereHelperint
	ShopCode    whereHelpernull_String
	Price       whereHelpernull_Int64
	Jan         whereHelpernull_String
}{
	ProductCode: whereHelperstring{field: "\"super_product_details\".\"product_code\""},
	SetNumber:   whereHelperint{field: "\"super_product_details\".\"set_number\""},
	ShopCode:    whereHelpernull_String{field: "\"super_product_details\".\"shop_code\""},
	Price:       whereHelpernull_Int64{field: "\"super_product_details\".\"price\""},
	Jan:         whereHelpernull_String{field: "\"super_product_details\".\"jan\""},
}

// SuperProductDetailRels is where relationship names are stored.
var SuperProductDetailRels = struct {
	ProductCodeSuperProduct string
}{
	ProductCodeSuperProduct: "ProductCodeSuperProduct",
}

// superProductDetailR is where relationships are stored.
type superProductDetailR struct {
	ProductCodeSuperProduct *SuperProduct `boil:"ProductCodeSuperProduct" json:"ProductCodeSuperProduct" toml:"ProductCodeSuperProduct" yaml:"ProductCodeSuperProduct"`
}

// NewStruct creates a new relationship struct
func (*superProductDetailR) NewStruct() *superProductDetailR {
	return &superProductDetailR{}
}

func (r *superProductDetailR) GetProductCodeSuperProduct() *SuperProduct {
	if r == nil {
		return nil
	}
	return r.ProductCodeSuperProduct
}

// superProductDetailL is where Load methods for each relationship are stored.
type superProductDetailL struct{}

var (
	superProductDetailAllColumns            = []string{"product_code", "set_number", "shop_code", "price", "jan"}
	superProductDetailColumnsWithoutDefault = []string{"product_code", "set_number"}
	superProductDetailColumnsWithDefault    = []string{"shop_code", "price", "jan"}
	superProductDetailPrimaryKeyColumns     = []string{"product_code", "set_number"}
	superProductDetailGeneratedColumns      = []string{}
)

type (
	// SuperProductDetailSlice is an alias for a slice of pointers to SuperProductDetail.
	// This should almost always be used instead of []SuperProductDetail.
	SuperProductDetailSlice []*SuperProductDetail
	// SuperProductDetailHook is the signature for custom SuperProductDetail hook methods
	SuperProductDetailHook func(context.Context, boil.ContextExecutor, *SuperProductDetail) error

	superProductDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	superProductDetailType                 = reflect.TypeOf(&SuperProductDetail{})
	superProductDetailMapping              = queries.MakeStructMapping(superProductDetailType)
	superProductDetailPrimaryKeyMapping, _ = queries.BindMapping(superProductDetailType, superProductDetailMapping, superProductDetailPrimaryKeyColumns)
	superProductDetailInsertCacheMut       sync.RWMutex
	superProductDetailInsertCache          = make(map[string]insertCache)
	superProductDetailUpdateCacheMut       sync.RWMutex
	superProductDetailUpdateCache          = make(map[string]updateCache)
	superProductDetailUpsertCacheMut       sync.RWMutex
	superProductDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var superProductDetailAfterSelectHooks []SuperProductDetailHook

var superProductDetailBeforeInsertHooks []SuperProductDetailHook
var superProductDetailAfterInsertHooks []SuperProductDetailHook

var superProductDetailBeforeUpdateHooks []SuperProductDetailHook
var superProductDetailAfterUpdateHooks []SuperProductDetailHook

var superProductDetailBeforeDeleteHooks []SuperProductDetailHook
var superProductDetailAfterDeleteHooks []SuperProductDetailHook

var superProductDetailBeforeUpsertHooks []SuperProductDetailHook
var superProductDetailAfterUpsertHooks []SuperProductDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SuperProductDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SuperProductDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SuperProductDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SuperProductDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SuperProductDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SuperProductDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SuperProductDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SuperProductDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SuperProductDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range superProductDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSuperProductDetailHook registers your hook function for all future operations.
func AddSuperProductDetailHook(hookPoint boil.HookPoint, superProductDetailHook SuperProductDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		superProductDetailAfterSelectHooks = append(superProductDetailAfterSelectHooks, superProductDetailHook)
	case boil.BeforeInsertHook:
		superProductDetailBeforeInsertHooks = append(superProductDetailBeforeInsertHooks, superProductDetailHook)
	case boil.AfterInsertHook:
		superProductDetailAfterInsertHooks = append(superProductDetailAfterInsertHooks, superProductDetailHook)
	case boil.BeforeUpdateHook:
		superProductDetailBeforeUpdateHooks = append(superProductDetailBeforeUpdateHooks, superProductDetailHook)
	case boil.AfterUpdateHook:
		superProductDetailAfterUpdateHooks = append(superProductDetailAfterUpdateHooks, superProductDetailHook)
	case boil.BeforeDeleteHook:
		superProductDetailBeforeDeleteHooks = append(superProductDetailBeforeDeleteHooks, superProductDetailHook)
	case boil.AfterDeleteHook:
		superProductDetailAfterDeleteHooks = append(superProductDetailAfterDeleteHooks, superProductDetailHook)
	case boil.BeforeUpsertHook:
		superProductDetailBeforeUpsertHooks = append(superProductDetailBeforeUpsertHooks, superProductDetailHook)
	case boil.AfterUpsertHook:
		superProductDetailAfterUpsertHooks = append(superProductDetailAfterUpsertHooks, superProductDetailHook)
	}
}

// One returns a single superProductDetail record from the query.
func (q superProductDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SuperProductDetail, error) {
	o := &SuperProductDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for super_product_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SuperProductDetail records from the query.
func (q superProductDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (SuperProductDetailSlice, error) {
	var o []*SuperProductDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SuperProductDetail slice")
	}

	if len(superProductDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SuperProductDetail records in the query.
func (q superProductDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count super_product_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q superProductDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if super_product_details exists")
	}

	return count > 0, nil
}

// ProductCodeSuperProduct pointed to by the foreign key.
func (o *SuperProductDetail) ProductCodeSuperProduct(mods ...qm.QueryMod) superProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"product_code\" = ?", o.ProductCode),
	}

	queryMods = append(queryMods, mods...)

	return SuperProducts(queryMods...)
}

// LoadProductCodeSuperProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (superProductDetailL) LoadProductCodeSuperProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSuperProductDetail interface{}, mods queries.Applicator) error {
	var slice []*SuperProductDetail
	var object *SuperProductDetail

	if singular {
		var ok bool
		object, ok = maybeSuperProductDetail.(*SuperProductDetail)
		if !ok {
			object = new(SuperProductDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSuperProductDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSuperProductDetail))
			}
		}
	} else {
		s, ok := maybeSuperProductDetail.(*[]*SuperProductDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSuperProductDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSuperProductDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &superProductDetailR{}
		}
		args = append(args, object.ProductCode)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &superProductDetailR{}
			}

			for _, a := range args {
				if a == obj.ProductCode {
					continue Outer
				}
			}

			args = append(args, obj.ProductCode)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`super_products`),
		qm.WhereIn(`super_products.product_code in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SuperProduct")
	}

	var resultSlice []*SuperProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SuperProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for super_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for super_products")
	}

	if len(superProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductCodeSuperProduct = foreign
		if foreign.R == nil {
			foreign.R = &superProductR{}
		}
		foreign.R.ProductCodeSuperProductDetails = append(foreign.R.ProductCodeSuperProductDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductCode == foreign.ProductCode {
				local.R.ProductCodeSuperProduct = foreign
				if foreign.R == nil {
					foreign.R = &superProductR{}
				}
				foreign.R.ProductCodeSuperProductDetails = append(foreign.R.ProductCodeSuperProductDetails, local)
				break
			}
		}
	}

	return nil
}

// SetProductCodeSuperProduct of the superProductDetail to the related item.
// Sets o.R.ProductCodeSuperProduct to related.
// Adds o to related.R.ProductCodeSuperProductDetails.
func (o *SuperProductDetail) SetProductCodeSuperProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SuperProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"super_product_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_code"}),
		strmangle.WhereClause("\"", "\"", 2, superProductDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductCode, o.ProductCode, o.SetNumber}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductCode = related.ProductCode
	if o.R == nil {
		o.R = &superProductDetailR{
			ProductCodeSuperProduct: related,
		}
	} else {
		o.R.ProductCodeSuperProduct = related
	}

	if related.R == nil {
		related.R = &superProductR{
			ProductCodeSuperProductDetails: SuperProductDetailSlice{o},
		}
	} else {
		related.R.ProductCodeSuperProductDetails = append(related.R.ProductCodeSuperProductDetails, o)
	}

	return nil
}

// SuperProductDetails retrieves all the records using an executor.
func SuperProductDetails(mods ...qm.QueryMod) superProductDetailQuery {
	mods = append(mods, qm.From("\"super_product_details\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"super_product_details\".*"})
	}

	return superProductDetailQuery{q}
}

// FindSuperProductDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSuperProductDetail(ctx context.Context, exec boil.ContextExecutor, productCode string, setNumber int, selectCols ...string) (*SuperProductDetail, error) {
	superProductDetailObj := &SuperProductDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"super_product_details\" where \"product_code\"=$1 AND \"set_number\"=$2", sel,
	)

	q := queries.Raw(query, productCode, setNumber)

	err := q.Bind(ctx, exec, superProductDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from super_product_details")
	}

	if err = superProductDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return superProductDetailObj, err
	}

	return superProductDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SuperProductDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no super_product_details provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(superProductDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	superProductDetailInsertCacheMut.RLock()
	cache, cached := superProductDetailInsertCache[key]
	superProductDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			superProductDetailAllColumns,
			superProductDetailColumnsWithDefault,
			superProductDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(superProductDetailType, superProductDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(superProductDetailType, superProductDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"super_product_details\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"super_product_details\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into super_product_details")
	}

	if !cached {
		superProductDetailInsertCacheMut.Lock()
		superProductDetailInsertCache[key] = cache
		superProductDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SuperProductDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SuperProductDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	superProductDetailUpdateCacheMut.RLock()
	cache, cached := superProductDetailUpdateCache[key]
	superProductDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			superProductDetailAllColumns,
			superProductDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update super_product_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"super_product_details\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, superProductDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(superProductDetailType, superProductDetailMapping, append(wl, superProductDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update super_product_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for super_product_details")
	}

	if !cached {
		superProductDetailUpdateCacheMut.Lock()
		superProductDetailUpdateCache[key] = cache
		superProductDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q superProductDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for super_product_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for super_product_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SuperProductDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), superProductDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"super_product_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, superProductDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in superProductDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all superProductDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SuperProductDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no super_product_details provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(superProductDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	superProductDetailUpsertCacheMut.RLock()
	cache, cached := superProductDetailUpsertCache[key]
	superProductDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			superProductDetailAllColumns,
			superProductDetailColumnsWithDefault,
			superProductDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			superProductDetailAllColumns,
			superProductDetailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert super_product_details, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(superProductDetailPrimaryKeyColumns))
			copy(conflict, superProductDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"super_product_details\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(superProductDetailType, superProductDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(superProductDetailType, superProductDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert super_product_details")
	}

	if !cached {
		superProductDetailUpsertCacheMut.Lock()
		superProductDetailUpsertCache[key] = cache
		superProductDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SuperProductDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SuperProductDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SuperProductDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), superProductDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"super_product_details\" WHERE \"product_code\"=$1 AND \"set_number\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from super_product_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for super_product_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q superProductDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no superProductDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from super_product_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for super_product_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SuperProductDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(superProductDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), superProductDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"super_product_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, superProductDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from superProductDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for super_product_details")
	}

	if len(superProductDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SuperProductDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSuperProductDetail(ctx, exec, o.ProductCode, o.SetNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SuperProductDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SuperProductDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), superProductDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"super_product_details\".* FROM \"super_product_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, superProductDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SuperProductDetailSlice")
	}

	*o = slice

	return nil
}

// SuperProductDetailExists checks if the SuperProductDetail row exists.
func SuperProductDetailExists(ctx context.Context, exec boil.ContextExecutor, productCode string, setNumber int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"super_product_details\" where \"product_code\"=$1 AND \"set_number\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productCode, setNumber)
	}
	row := exec.QueryRowContext(ctx, sql, productCode, setNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if super_product_details exists")
	}

	return exists, nil
}

// Exists checks if the SuperProductDetail row exists.
func (o *SuperProductDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SuperProductDetailExists(ctx, exec, o.ProductCode, o.SetNumber)
}
