// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KeepaProduct is an object representing the database table.
type KeepaProduct struct {
	Asin         string    `boil:"asin" json:"asin" toml:"asin" yaml:"asin"`
	SalesDrops90 null.Int  `boil:"sales_drops_90" json:"sales_drops_90,omitempty" toml:"sales_drops_90" yaml:"sales_drops_90,omitempty"`
	Created      null.Time `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Modified     null.Time `boil:"modified" json:"modified,omitempty" toml:"modified" yaml:"modified,omitempty"`
	PriceData    null.JSON `boil:"price_data" json:"price_data,omitempty" toml:"price_data" yaml:"price_data,omitempty"`
	RankData     null.JSON `boil:"rank_data" json:"rank_data,omitempty" toml:"rank_data" yaml:"rank_data,omitempty"`
	RenderData   null.JSON `boil:"render_data" json:"render_data,omitempty" toml:"render_data" yaml:"render_data,omitempty"`

	R *keepaProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L keepaProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KeepaProductColumns = struct {
	Asin         string
	SalesDrops90 string
	Created      string
	Modified     string
	PriceData    string
	RankData     string
	RenderData   string
}{
	Asin:         "asin",
	SalesDrops90: "sales_drops_90",
	Created:      "created",
	Modified:     "modified",
	PriceData:    "price_data",
	RankData:     "rank_data",
	RenderData:   "render_data",
}

var KeepaProductTableColumns = struct {
	Asin         string
	SalesDrops90 string
	Created      string
	Modified     string
	PriceData    string
	RankData     string
	RenderData   string
}{
	Asin:         "keepa_products.asin",
	SalesDrops90: "keepa_products.sales_drops_90",
	Created:      "keepa_products.created",
	Modified:     "keepa_products.modified",
	PriceData:    "keepa_products.price_data",
	RankData:     "keepa_products.rank_data",
	RenderData:   "keepa_products.render_data",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var KeepaProductWhere = struct {
	Asin         whereHelperstring
	SalesDrops90 whereHelpernull_Int
	Created      whereHelpernull_Time
	Modified     whereHelpernull_Time
	PriceData    whereHelpernull_JSON
	RankData     whereHelpernull_JSON
	RenderData   whereHelpernull_JSON
}{
	Asin:         whereHelperstring{field: "\"keepa_products\".\"asin\""},
	SalesDrops90: whereHelpernull_Int{field: "\"keepa_products\".\"sales_drops_90\""},
	Created:      whereHelpernull_Time{field: "\"keepa_products\".\"created\""},
	Modified:     whereHelpernull_Time{field: "\"keepa_products\".\"modified\""},
	PriceData:    whereHelpernull_JSON{field: "\"keepa_products\".\"price_data\""},
	RankData:     whereHelpernull_JSON{field: "\"keepa_products\".\"rank_data\""},
	RenderData:   whereHelpernull_JSON{field: "\"keepa_products\".\"render_data\""},
}

// KeepaProductRels is where relationship names are stored.
var KeepaProductRels = struct {
}{}

// keepaProductR is where relationships are stored.
type keepaProductR struct {
}

// NewStruct creates a new relationship struct
func (*keepaProductR) NewStruct() *keepaProductR {
	return &keepaProductR{}
}

// keepaProductL is where Load methods for each relationship are stored.
type keepaProductL struct{}

var (
	keepaProductAllColumns            = []string{"asin", "sales_drops_90", "created", "modified", "price_data", "rank_data", "render_data"}
	keepaProductColumnsWithoutDefault = []string{"asin"}
	keepaProductColumnsWithDefault    = []string{"sales_drops_90", "created", "modified", "price_data", "rank_data", "render_data"}
	keepaProductPrimaryKeyColumns     = []string{"asin"}
	keepaProductGeneratedColumns      = []string{}
)

type (
	// KeepaProductSlice is an alias for a slice of pointers to KeepaProduct.
	// This should almost always be used instead of []KeepaProduct.
	KeepaProductSlice []*KeepaProduct
	// KeepaProductHook is the signature for custom KeepaProduct hook methods
	KeepaProductHook func(context.Context, boil.ContextExecutor, *KeepaProduct) error

	keepaProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	keepaProductType                 = reflect.TypeOf(&KeepaProduct{})
	keepaProductMapping              = queries.MakeStructMapping(keepaProductType)
	keepaProductPrimaryKeyMapping, _ = queries.BindMapping(keepaProductType, keepaProductMapping, keepaProductPrimaryKeyColumns)
	keepaProductInsertCacheMut       sync.RWMutex
	keepaProductInsertCache          = make(map[string]insertCache)
	keepaProductUpdateCacheMut       sync.RWMutex
	keepaProductUpdateCache          = make(map[string]updateCache)
	keepaProductUpsertCacheMut       sync.RWMutex
	keepaProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var keepaProductAfterSelectHooks []KeepaProductHook

var keepaProductBeforeInsertHooks []KeepaProductHook
var keepaProductAfterInsertHooks []KeepaProductHook

var keepaProductBeforeUpdateHooks []KeepaProductHook
var keepaProductAfterUpdateHooks []KeepaProductHook

var keepaProductBeforeDeleteHooks []KeepaProductHook
var keepaProductAfterDeleteHooks []KeepaProductHook

var keepaProductBeforeUpsertHooks []KeepaProductHook
var keepaProductAfterUpsertHooks []KeepaProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KeepaProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KeepaProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KeepaProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KeepaProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KeepaProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KeepaProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KeepaProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KeepaProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KeepaProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range keepaProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKeepaProductHook registers your hook function for all future operations.
func AddKeepaProductHook(hookPoint boil.HookPoint, keepaProductHook KeepaProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		keepaProductAfterSelectHooks = append(keepaProductAfterSelectHooks, keepaProductHook)
	case boil.BeforeInsertHook:
		keepaProductBeforeInsertHooks = append(keepaProductBeforeInsertHooks, keepaProductHook)
	case boil.AfterInsertHook:
		keepaProductAfterInsertHooks = append(keepaProductAfterInsertHooks, keepaProductHook)
	case boil.BeforeUpdateHook:
		keepaProductBeforeUpdateHooks = append(keepaProductBeforeUpdateHooks, keepaProductHook)
	case boil.AfterUpdateHook:
		keepaProductAfterUpdateHooks = append(keepaProductAfterUpdateHooks, keepaProductHook)
	case boil.BeforeDeleteHook:
		keepaProductBeforeDeleteHooks = append(keepaProductBeforeDeleteHooks, keepaProductHook)
	case boil.AfterDeleteHook:
		keepaProductAfterDeleteHooks = append(keepaProductAfterDeleteHooks, keepaProductHook)
	case boil.BeforeUpsertHook:
		keepaProductBeforeUpsertHooks = append(keepaProductBeforeUpsertHooks, keepaProductHook)
	case boil.AfterUpsertHook:
		keepaProductAfterUpsertHooks = append(keepaProductAfterUpsertHooks, keepaProductHook)
	}
}

// One returns a single keepaProduct record from the query.
func (q keepaProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KeepaProduct, error) {
	o := &KeepaProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for keepa_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KeepaProduct records from the query.
func (q keepaProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (KeepaProductSlice, error) {
	var o []*KeepaProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KeepaProduct slice")
	}

	if len(keepaProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KeepaProduct records in the query.
func (q keepaProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count keepa_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q keepaProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if keepa_products exists")
	}

	return count > 0, nil
}

// KeepaProducts retrieves all the records using an executor.
func KeepaProducts(mods ...qm.QueryMod) keepaProductQuery {
	mods = append(mods, qm.From("\"keepa_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"keepa_products\".*"})
	}

	return keepaProductQuery{q}
}

// FindKeepaProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKeepaProduct(ctx context.Context, exec boil.ContextExecutor, asin string, selectCols ...string) (*KeepaProduct, error) {
	keepaProductObj := &KeepaProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"keepa_products\" where \"asin\"=$1", sel,
	)

	q := queries.Raw(query, asin)

	err := q.Bind(ctx, exec, keepaProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from keepa_products")
	}

	if err = keepaProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return keepaProductObj, err
	}

	return keepaProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KeepaProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no keepa_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepaProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	keepaProductInsertCacheMut.RLock()
	cache, cached := keepaProductInsertCache[key]
	keepaProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			keepaProductAllColumns,
			keepaProductColumnsWithDefault,
			keepaProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(keepaProductType, keepaProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(keepaProductType, keepaProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"keepa_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"keepa_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into keepa_products")
	}

	if !cached {
		keepaProductInsertCacheMut.Lock()
		keepaProductInsertCache[key] = cache
		keepaProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KeepaProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KeepaProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	keepaProductUpdateCacheMut.RLock()
	cache, cached := keepaProductUpdateCache[key]
	keepaProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			keepaProductAllColumns,
			keepaProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update keepa_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"keepa_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, keepaProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(keepaProductType, keepaProductMapping, append(wl, keepaProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update keepa_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for keepa_products")
	}

	if !cached {
		keepaProductUpdateCacheMut.Lock()
		keepaProductUpdateCache[key] = cache
		keepaProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q keepaProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for keepa_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for keepa_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KeepaProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepaProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"keepa_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, keepaProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in keepaProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all keepaProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KeepaProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no keepa_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keepaProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	keepaProductUpsertCacheMut.RLock()
	cache, cached := keepaProductUpsertCache[key]
	keepaProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			keepaProductAllColumns,
			keepaProductColumnsWithDefault,
			keepaProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			keepaProductAllColumns,
			keepaProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert keepa_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(keepaProductPrimaryKeyColumns))
			copy(conflict, keepaProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"keepa_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(keepaProductType, keepaProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(keepaProductType, keepaProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert keepa_products")
	}

	if !cached {
		keepaProductUpsertCacheMut.Lock()
		keepaProductUpsertCache[key] = cache
		keepaProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KeepaProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KeepaProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KeepaProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), keepaProductPrimaryKeyMapping)
	sql := "DELETE FROM \"keepa_products\" WHERE \"asin\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from keepa_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for keepa_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q keepaProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no keepaProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from keepa_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for keepa_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KeepaProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(keepaProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepaProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"keepa_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keepaProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from keepaProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for keepa_products")
	}

	if len(keepaProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KeepaProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKeepaProduct(ctx, exec, o.Asin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeepaProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KeepaProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keepaProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"keepa_products\".* FROM \"keepa_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keepaProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KeepaProductSlice")
	}

	*o = slice

	return nil
}

// KeepaProductExists checks if the KeepaProduct row exists.
func KeepaProductExists(ctx context.Context, exec boil.ContextExecutor, asin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"keepa_products\" where \"asin\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, asin)
	}
	row := exec.QueryRowContext(ctx, sql, asin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if keepa_products exists")
	}

	return exists, nil
}

// Exists checks if the KeepaProduct row exists.
func (o *KeepaProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KeepaProductExists(ctx, exec, o.Asin)
}
