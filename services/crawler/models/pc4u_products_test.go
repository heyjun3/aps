// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPc4uProducts(t *testing.T) {
	t.Parallel()

	query := Pc4uProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPc4uProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPc4uProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pc4uProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPc4uProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := Pc4uProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPc4uProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := Pc4uProductExists(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Errorf("Unable to check if Pc4uProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected Pc4uProductExists to return true, but got false.")
	}
}

func testPc4uProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pc4uProductFound, err := FindPc4uProduct(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Error(err)
	}

	if pc4uProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPc4uProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pc4uProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPc4uProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pc4uProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPc4uProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pc4uProductOne := &Pc4uProduct{}
	pc4uProductTwo := &Pc4uProduct{}
	if err = randomize.Struct(seed, pc4uProductOne, pc4uProductDBTypes, false, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, pc4uProductTwo, pc4uProductDBTypes, false, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pc4uProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pc4uProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pc4uProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPc4uProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pc4uProductOne := &Pc4uProduct{}
	pc4uProductTwo := &Pc4uProduct{}
	if err = randomize.Struct(seed, pc4uProductOne, pc4uProductDBTypes, false, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, pc4uProductTwo, pc4uProductDBTypes, false, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pc4uProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pc4uProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pc4uProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func pc4uProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pc4uProduct) error {
	*o = Pc4uProduct{}
	return nil
}

func testPc4uProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Pc4uProduct{}
	o := &Pc4uProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct object: %s", err)
	}

	AddPc4uProductHook(boil.BeforeInsertHook, pc4uProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pc4uProductBeforeInsertHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.AfterInsertHook, pc4uProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pc4uProductAfterInsertHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.AfterSelectHook, pc4uProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pc4uProductAfterSelectHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.BeforeUpdateHook, pc4uProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pc4uProductBeforeUpdateHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.AfterUpdateHook, pc4uProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pc4uProductAfterUpdateHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.BeforeDeleteHook, pc4uProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pc4uProductBeforeDeleteHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.AfterDeleteHook, pc4uProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pc4uProductAfterDeleteHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.BeforeUpsertHook, pc4uProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pc4uProductBeforeUpsertHooks = []Pc4uProductHook{}

	AddPc4uProductHook(boil.AfterUpsertHook, pc4uProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pc4uProductAfterUpsertHooks = []Pc4uProductHook{}
}

func testPc4uProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPc4uProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pc4uProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPc4uProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPc4uProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := Pc4uProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPc4uProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pc4uProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pc4uProductDBTypes = map[string]string{`Name`: `character varying`, `Jan`: `character varying`, `Price`: `bigint`, `ShopCode`: `character varying`, `ProductCode`: `character varying`, `URL`: `character varying`}
	_                  = bytes.MinRead
)

func testPc4uProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pc4uProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pc4uProductAllColumns) == len(pc4uProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPc4uProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pc4uProductAllColumns) == len(pc4uProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pc4uProduct{}
	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pc4uProductDBTypes, true, pc4uProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pc4uProductAllColumns, pc4uProductPrimaryKeyColumns) {
		fields = pc4uProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			pc4uProductAllColumns,
			pc4uProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := Pc4uProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPc4uProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(pc4uProductAllColumns) == len(pc4uProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Pc4uProduct{}
	if err = randomize.Struct(seed, &o, pc4uProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pc4uProduct: %s", err)
	}

	count, err := Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pc4uProductDBTypes, false, pc4uProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pc4uProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pc4uProduct: %s", err)
	}

	count, err = Pc4uProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
