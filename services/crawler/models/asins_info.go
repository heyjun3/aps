// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AsinsInfo is an object representing the database table.
type AsinsInfo struct {
	Asin     string      `boil:"asin" json:"asin" toml:"asin" yaml:"asin"`
	Jan      null.String `boil:"jan" json:"jan,omitempty" toml:"jan" yaml:"jan,omitempty"`
	Title    null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Quantity null.Int64  `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Modified null.Time   `boil:"modified" json:"modified,omitempty" toml:"modified" yaml:"modified,omitempty"`

	R *asinsInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L asinsInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AsinsInfoColumns = struct {
	Asin     string
	Jan      string
	Title    string
	Quantity string
	Modified string
}{
	Asin:     "asin",
	Jan:      "jan",
	Title:    "title",
	Quantity: "quantity",
	Modified: "modified",
}

var AsinsInfoTableColumns = struct {
	Asin     string
	Jan      string
	Title    string
	Quantity string
	Modified string
}{
	Asin:     "asins_info.asin",
	Jan:      "asins_info.jan",
	Title:    "asins_info.title",
	Quantity: "asins_info.quantity",
	Modified: "asins_info.modified",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AsinsInfoWhere = struct {
	Asin     whereHelperstring
	Jan      whereHelpernull_String
	Title    whereHelpernull_String
	Quantity whereHelpernull_Int64
	Modified whereHelpernull_Time
}{
	Asin:     whereHelperstring{field: "\"asins_info\".\"asin\""},
	Jan:      whereHelpernull_String{field: "\"asins_info\".\"jan\""},
	Title:    whereHelpernull_String{field: "\"asins_info\".\"title\""},
	Quantity: whereHelpernull_Int64{field: "\"asins_info\".\"quantity\""},
	Modified: whereHelpernull_Time{field: "\"asins_info\".\"modified\""},
}

// AsinsInfoRels is where relationship names are stored.
var AsinsInfoRels = struct {
	AsinSpapiFee   string
	AsinSpapiPrice string
}{
	AsinSpapiFee:   "AsinSpapiFee",
	AsinSpapiPrice: "AsinSpapiPrice",
}

// asinsInfoR is where relationships are stored.
type asinsInfoR struct {
	AsinSpapiFee   *SpapiFee   `boil:"AsinSpapiFee" json:"AsinSpapiFee" toml:"AsinSpapiFee" yaml:"AsinSpapiFee"`
	AsinSpapiPrice *SpapiPrice `boil:"AsinSpapiPrice" json:"AsinSpapiPrice" toml:"AsinSpapiPrice" yaml:"AsinSpapiPrice"`
}

// NewStruct creates a new relationship struct
func (*asinsInfoR) NewStruct() *asinsInfoR {
	return &asinsInfoR{}
}

func (r *asinsInfoR) GetAsinSpapiFee() *SpapiFee {
	if r == nil {
		return nil
	}
	return r.AsinSpapiFee
}

func (r *asinsInfoR) GetAsinSpapiPrice() *SpapiPrice {
	if r == nil {
		return nil
	}
	return r.AsinSpapiPrice
}

// asinsInfoL is where Load methods for each relationship are stored.
type asinsInfoL struct{}

var (
	asinsInfoAllColumns            = []string{"asin", "jan", "title", "quantity", "modified"}
	asinsInfoColumnsWithoutDefault = []string{"asin"}
	asinsInfoColumnsWithDefault    = []string{"jan", "title", "quantity", "modified"}
	asinsInfoPrimaryKeyColumns     = []string{"asin"}
	asinsInfoGeneratedColumns      = []string{}
)

type (
	// AsinsInfoSlice is an alias for a slice of pointers to AsinsInfo.
	// This should almost always be used instead of []AsinsInfo.
	AsinsInfoSlice []*AsinsInfo
	// AsinsInfoHook is the signature for custom AsinsInfo hook methods
	AsinsInfoHook func(context.Context, boil.ContextExecutor, *AsinsInfo) error

	asinsInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	asinsInfoType                 = reflect.TypeOf(&AsinsInfo{})
	asinsInfoMapping              = queries.MakeStructMapping(asinsInfoType)
	asinsInfoPrimaryKeyMapping, _ = queries.BindMapping(asinsInfoType, asinsInfoMapping, asinsInfoPrimaryKeyColumns)
	asinsInfoInsertCacheMut       sync.RWMutex
	asinsInfoInsertCache          = make(map[string]insertCache)
	asinsInfoUpdateCacheMut       sync.RWMutex
	asinsInfoUpdateCache          = make(map[string]updateCache)
	asinsInfoUpsertCacheMut       sync.RWMutex
	asinsInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var asinsInfoAfterSelectHooks []AsinsInfoHook

var asinsInfoBeforeInsertHooks []AsinsInfoHook
var asinsInfoAfterInsertHooks []AsinsInfoHook

var asinsInfoBeforeUpdateHooks []AsinsInfoHook
var asinsInfoAfterUpdateHooks []AsinsInfoHook

var asinsInfoBeforeDeleteHooks []AsinsInfoHook
var asinsInfoAfterDeleteHooks []AsinsInfoHook

var asinsInfoBeforeUpsertHooks []AsinsInfoHook
var asinsInfoAfterUpsertHooks []AsinsInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AsinsInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AsinsInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AsinsInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AsinsInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AsinsInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AsinsInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AsinsInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AsinsInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AsinsInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range asinsInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAsinsInfoHook registers your hook function for all future operations.
func AddAsinsInfoHook(hookPoint boil.HookPoint, asinsInfoHook AsinsInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		asinsInfoAfterSelectHooks = append(asinsInfoAfterSelectHooks, asinsInfoHook)
	case boil.BeforeInsertHook:
		asinsInfoBeforeInsertHooks = append(asinsInfoBeforeInsertHooks, asinsInfoHook)
	case boil.AfterInsertHook:
		asinsInfoAfterInsertHooks = append(asinsInfoAfterInsertHooks, asinsInfoHook)
	case boil.BeforeUpdateHook:
		asinsInfoBeforeUpdateHooks = append(asinsInfoBeforeUpdateHooks, asinsInfoHook)
	case boil.AfterUpdateHook:
		asinsInfoAfterUpdateHooks = append(asinsInfoAfterUpdateHooks, asinsInfoHook)
	case boil.BeforeDeleteHook:
		asinsInfoBeforeDeleteHooks = append(asinsInfoBeforeDeleteHooks, asinsInfoHook)
	case boil.AfterDeleteHook:
		asinsInfoAfterDeleteHooks = append(asinsInfoAfterDeleteHooks, asinsInfoHook)
	case boil.BeforeUpsertHook:
		asinsInfoBeforeUpsertHooks = append(asinsInfoBeforeUpsertHooks, asinsInfoHook)
	case boil.AfterUpsertHook:
		asinsInfoAfterUpsertHooks = append(asinsInfoAfterUpsertHooks, asinsInfoHook)
	}
}

// One returns a single asinsInfo record from the query.
func (q asinsInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AsinsInfo, error) {
	o := &AsinsInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for asins_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AsinsInfo records from the query.
func (q asinsInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (AsinsInfoSlice, error) {
	var o []*AsinsInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AsinsInfo slice")
	}

	if len(asinsInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AsinsInfo records in the query.
func (q asinsInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count asins_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q asinsInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if asins_info exists")
	}

	return count > 0, nil
}

// AsinSpapiFee pointed to by the foreign key.
func (o *AsinsInfo) AsinSpapiFee(mods ...qm.QueryMod) spapiFeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"asin\" = ?", o.Asin),
	}

	queryMods = append(queryMods, mods...)

	return SpapiFees(queryMods...)
}

// AsinSpapiPrice pointed to by the foreign key.
func (o *AsinsInfo) AsinSpapiPrice(mods ...qm.QueryMod) spapiPriceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"asin\" = ?", o.Asin),
	}

	queryMods = append(queryMods, mods...)

	return SpapiPrices(queryMods...)
}

// LoadAsinSpapiFee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (asinsInfoL) LoadAsinSpapiFee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAsinsInfo interface{}, mods queries.Applicator) error {
	var slice []*AsinsInfo
	var object *AsinsInfo

	if singular {
		var ok bool
		object, ok = maybeAsinsInfo.(*AsinsInfo)
		if !ok {
			object = new(AsinsInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAsinsInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAsinsInfo))
			}
		}
	} else {
		s, ok := maybeAsinsInfo.(*[]*AsinsInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAsinsInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAsinsInfo))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asinsInfoR{}
		}
		args = append(args, object.Asin)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asinsInfoR{}
			}

			for _, a := range args {
				if a == obj.Asin {
					continue Outer
				}
			}

			args = append(args, obj.Asin)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spapi_fees`),
		qm.WhereIn(`spapi_fees.asin in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SpapiFee")
	}

	var resultSlice []*SpapiFee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SpapiFee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spapi_fees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spapi_fees")
	}

	if len(spapiFeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AsinSpapiFee = foreign
		if foreign.R == nil {
			foreign.R = &spapiFeeR{}
		}
		foreign.R.AsinAsinsInfo = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Asin == foreign.Asin {
				local.R.AsinSpapiFee = foreign
				if foreign.R == nil {
					foreign.R = &spapiFeeR{}
				}
				foreign.R.AsinAsinsInfo = local
				break
			}
		}
	}

	return nil
}

// LoadAsinSpapiPrice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (asinsInfoL) LoadAsinSpapiPrice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAsinsInfo interface{}, mods queries.Applicator) error {
	var slice []*AsinsInfo
	var object *AsinsInfo

	if singular {
		var ok bool
		object, ok = maybeAsinsInfo.(*AsinsInfo)
		if !ok {
			object = new(AsinsInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAsinsInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAsinsInfo))
			}
		}
	} else {
		s, ok := maybeAsinsInfo.(*[]*AsinsInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAsinsInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAsinsInfo))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &asinsInfoR{}
		}
		args = append(args, object.Asin)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &asinsInfoR{}
			}

			for _, a := range args {
				if a == obj.Asin {
					continue Outer
				}
			}

			args = append(args, obj.Asin)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spapi_prices`),
		qm.WhereIn(`spapi_prices.asin in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SpapiPrice")
	}

	var resultSlice []*SpapiPrice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SpapiPrice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spapi_prices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spapi_prices")
	}

	if len(spapiPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AsinSpapiPrice = foreign
		if foreign.R == nil {
			foreign.R = &spapiPriceR{}
		}
		foreign.R.AsinAsinsInfo = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Asin == foreign.Asin {
				local.R.AsinSpapiPrice = foreign
				if foreign.R == nil {
					foreign.R = &spapiPriceR{}
				}
				foreign.R.AsinAsinsInfo = local
				break
			}
		}
	}

	return nil
}

// SetAsinSpapiFee of the asinsInfo to the related item.
// Sets o.R.AsinSpapiFee to related.
// Adds o to related.R.AsinAsinsInfo.
func (o *AsinsInfo) SetAsinSpapiFee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SpapiFee) error {
	var err error

	if insert {
		related.Asin = o.Asin

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"spapi_fees\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"asin"}),
			strmangle.WhereClause("\"", "\"", 2, spapiFeePrimaryKeyColumns),
		)
		values := []interface{}{o.Asin, related.Asin}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Asin = o.Asin
	}

	if o.R == nil {
		o.R = &asinsInfoR{
			AsinSpapiFee: related,
		}
	} else {
		o.R.AsinSpapiFee = related
	}

	if related.R == nil {
		related.R = &spapiFeeR{
			AsinAsinsInfo: o,
		}
	} else {
		related.R.AsinAsinsInfo = o
	}
	return nil
}

// SetAsinSpapiPrice of the asinsInfo to the related item.
// Sets o.R.AsinSpapiPrice to related.
// Adds o to related.R.AsinAsinsInfo.
func (o *AsinsInfo) SetAsinSpapiPrice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SpapiPrice) error {
	var err error

	if insert {
		related.Asin = o.Asin

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"spapi_prices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"asin"}),
			strmangle.WhereClause("\"", "\"", 2, spapiPricePrimaryKeyColumns),
		)
		values := []interface{}{o.Asin, related.Asin}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Asin = o.Asin
	}

	if o.R == nil {
		o.R = &asinsInfoR{
			AsinSpapiPrice: related,
		}
	} else {
		o.R.AsinSpapiPrice = related
	}

	if related.R == nil {
		related.R = &spapiPriceR{
			AsinAsinsInfo: o,
		}
	} else {
		related.R.AsinAsinsInfo = o
	}
	return nil
}

// AsinsInfos retrieves all the records using an executor.
func AsinsInfos(mods ...qm.QueryMod) asinsInfoQuery {
	mods = append(mods, qm.From("\"asins_info\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"asins_info\".*"})
	}

	return asinsInfoQuery{q}
}

// FindAsinsInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAsinsInfo(ctx context.Context, exec boil.ContextExecutor, asin string, selectCols ...string) (*AsinsInfo, error) {
	asinsInfoObj := &AsinsInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asins_info\" where \"asin\"=$1", sel,
	)

	q := queries.Raw(query, asin)

	err := q.Bind(ctx, exec, asinsInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from asins_info")
	}

	if err = asinsInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return asinsInfoObj, err
	}

	return asinsInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AsinsInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asins_info provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asinsInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	asinsInfoInsertCacheMut.RLock()
	cache, cached := asinsInfoInsertCache[key]
	asinsInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			asinsInfoAllColumns,
			asinsInfoColumnsWithDefault,
			asinsInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(asinsInfoType, asinsInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(asinsInfoType, asinsInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asins_info\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asins_info\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into asins_info")
	}

	if !cached {
		asinsInfoInsertCacheMut.Lock()
		asinsInfoInsertCache[key] = cache
		asinsInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AsinsInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AsinsInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	asinsInfoUpdateCacheMut.RLock()
	cache, cached := asinsInfoUpdateCache[key]
	asinsInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			asinsInfoAllColumns,
			asinsInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update asins_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asins_info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, asinsInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(asinsInfoType, asinsInfoMapping, append(wl, asinsInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update asins_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for asins_info")
	}

	if !cached {
		asinsInfoUpdateCacheMut.Lock()
		asinsInfoUpdateCache[key] = cache
		asinsInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q asinsInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for asins_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for asins_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AsinsInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asinsInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asins_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, asinsInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in asinsInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all asinsInfo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AsinsInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asins_info provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(asinsInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	asinsInfoUpsertCacheMut.RLock()
	cache, cached := asinsInfoUpsertCache[key]
	asinsInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			asinsInfoAllColumns,
			asinsInfoColumnsWithDefault,
			asinsInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			asinsInfoAllColumns,
			asinsInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert asins_info, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(asinsInfoPrimaryKeyColumns))
			copy(conflict, asinsInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asins_info\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(asinsInfoType, asinsInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(asinsInfoType, asinsInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert asins_info")
	}

	if !cached {
		asinsInfoUpsertCacheMut.Lock()
		asinsInfoUpsertCache[key] = cache
		asinsInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AsinsInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AsinsInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AsinsInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), asinsInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"asins_info\" WHERE \"asin\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from asins_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for asins_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q asinsInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no asinsInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asins_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asins_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AsinsInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(asinsInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asinsInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asins_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asinsInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asinsInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asins_info")
	}

	if len(asinsInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AsinsInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAsinsInfo(ctx, exec, o.Asin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AsinsInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AsinsInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), asinsInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asins_info\".* FROM \"asins_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, asinsInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AsinsInfoSlice")
	}

	*o = slice

	return nil
}

// AsinsInfoExists checks if the AsinsInfo row exists.
func AsinsInfoExists(ctx context.Context, exec boil.ContextExecutor, asin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asins_info\" where \"asin\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, asin)
	}
	row := exec.QueryRowContext(ctx, sql, asin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if asins_info exists")
	}

	return exists, nil
}

// Exists checks if the AsinsInfo row exists.
func (o *AsinsInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AsinsInfoExists(ctx, exec, o.Asin)
}
