// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBuffaloProducts(t *testing.T) {
	t.Parallel()

	query := BuffaloProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBuffaloProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuffaloProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BuffaloProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuffaloProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuffaloProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuffaloProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BuffaloProductExists(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Errorf("Unable to check if BuffaloProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BuffaloProductExists to return true, but got false.")
	}
}

func testBuffaloProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	buffaloProductFound, err := FindBuffaloProduct(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Error(err)
	}

	if buffaloProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBuffaloProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BuffaloProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBuffaloProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BuffaloProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBuffaloProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	buffaloProductOne := &BuffaloProduct{}
	buffaloProductTwo := &BuffaloProduct{}
	if err = randomize.Struct(seed, buffaloProductOne, buffaloProductDBTypes, false, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, buffaloProductTwo, buffaloProductDBTypes, false, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buffaloProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buffaloProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BuffaloProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBuffaloProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	buffaloProductOne := &BuffaloProduct{}
	buffaloProductTwo := &BuffaloProduct{}
	if err = randomize.Struct(seed, buffaloProductOne, buffaloProductDBTypes, false, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, buffaloProductTwo, buffaloProductDBTypes, false, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buffaloProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buffaloProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func buffaloProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func buffaloProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BuffaloProduct) error {
	*o = BuffaloProduct{}
	return nil
}

func testBuffaloProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BuffaloProduct{}
	o := &BuffaloProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct object: %s", err)
	}

	AddBuffaloProductHook(boil.BeforeInsertHook, buffaloProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	buffaloProductBeforeInsertHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.AfterInsertHook, buffaloProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	buffaloProductAfterInsertHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.AfterSelectHook, buffaloProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	buffaloProductAfterSelectHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.BeforeUpdateHook, buffaloProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	buffaloProductBeforeUpdateHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.AfterUpdateHook, buffaloProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	buffaloProductAfterUpdateHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.BeforeDeleteHook, buffaloProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	buffaloProductBeforeDeleteHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.AfterDeleteHook, buffaloProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	buffaloProductAfterDeleteHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.BeforeUpsertHook, buffaloProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	buffaloProductBeforeUpsertHooks = []BuffaloProductHook{}

	AddBuffaloProductHook(boil.AfterUpsertHook, buffaloProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	buffaloProductAfterUpsertHooks = []BuffaloProductHook{}
}

func testBuffaloProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuffaloProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(buffaloProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuffaloProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuffaloProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuffaloProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuffaloProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BuffaloProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	buffaloProductDBTypes = map[string]string{`Name`: `character varying`, `Jan`: `character varying`, `Price`: `bigint`, `ShopCode`: `character varying`, `ProductCode`: `character varying`, `URL`: `character varying`}
	_                     = bytes.MinRead
)

func testBuffaloProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(buffaloProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(buffaloProductAllColumns) == len(buffaloProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBuffaloProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(buffaloProductAllColumns) == len(buffaloProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BuffaloProduct{}
	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buffaloProductDBTypes, true, buffaloProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(buffaloProductAllColumns, buffaloProductPrimaryKeyColumns) {
		fields = buffaloProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			buffaloProductAllColumns,
			buffaloProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BuffaloProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBuffaloProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(buffaloProductAllColumns) == len(buffaloProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BuffaloProduct{}
	if err = randomize.Struct(seed, &o, buffaloProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BuffaloProduct: %s", err)
	}

	count, err := BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, buffaloProductDBTypes, false, buffaloProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuffaloProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BuffaloProduct: %s", err)
	}

	count, err = BuffaloProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
