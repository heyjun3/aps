// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testKeepaProducts(t *testing.T) {
	t.Parallel()

	query := KeepaProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testKeepaProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeepaProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := KeepaProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeepaProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KeepaProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeepaProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := KeepaProductExists(ctx, tx, o.Asin)
	if err != nil {
		t.Errorf("Unable to check if KeepaProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected KeepaProductExists to return true, but got false.")
	}
}

func testKeepaProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	keepaProductFound, err := FindKeepaProduct(ctx, tx, o.Asin)
	if err != nil {
		t.Error(err)
	}

	if keepaProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testKeepaProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = KeepaProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testKeepaProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := KeepaProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testKeepaProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	keepaProductOne := &KeepaProduct{}
	keepaProductTwo := &KeepaProduct{}
	if err = randomize.Struct(seed, keepaProductOne, keepaProductDBTypes, false, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, keepaProductTwo, keepaProductDBTypes, false, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = keepaProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = keepaProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := KeepaProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testKeepaProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keepaProductOne := &KeepaProduct{}
	keepaProductTwo := &KeepaProduct{}
	if err = randomize.Struct(seed, keepaProductOne, keepaProductDBTypes, false, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, keepaProductTwo, keepaProductDBTypes, false, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = keepaProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = keepaProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func keepaProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func keepaProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *KeepaProduct) error {
	*o = KeepaProduct{}
	return nil
}

func testKeepaProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &KeepaProduct{}
	o := &KeepaProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, keepaProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize KeepaProduct object: %s", err)
	}

	AddKeepaProductHook(boil.BeforeInsertHook, keepaProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	keepaProductBeforeInsertHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.AfterInsertHook, keepaProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	keepaProductAfterInsertHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.AfterSelectHook, keepaProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	keepaProductAfterSelectHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.BeforeUpdateHook, keepaProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	keepaProductBeforeUpdateHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.AfterUpdateHook, keepaProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	keepaProductAfterUpdateHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.BeforeDeleteHook, keepaProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	keepaProductBeforeDeleteHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.AfterDeleteHook, keepaProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	keepaProductAfterDeleteHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.BeforeUpsertHook, keepaProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	keepaProductBeforeUpsertHooks = []KeepaProductHook{}

	AddKeepaProductHook(boil.AfterUpsertHook, keepaProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	keepaProductAfterUpsertHooks = []KeepaProductHook{}
}

func testKeepaProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKeepaProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(keepaProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKeepaProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKeepaProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KeepaProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKeepaProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := KeepaProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	keepaProductDBTypes = map[string]string{`Asin`: `character varying`, `SalesDrops90`: `integer`, `Created`: `date`, `Modified`: `date`, `PriceData`: `jsonb`, `RankData`: `jsonb`, `RenderData`: `jsonb`}
	_                   = bytes.MinRead
)

func testKeepaProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(keepaProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(keepaProductAllColumns) == len(keepaProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testKeepaProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(keepaProductAllColumns) == len(keepaProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &KeepaProduct{}
	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, keepaProductDBTypes, true, keepaProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(keepaProductAllColumns, keepaProductPrimaryKeyColumns) {
		fields = keepaProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			keepaProductAllColumns,
			keepaProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := KeepaProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testKeepaProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(keepaProductAllColumns) == len(keepaProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := KeepaProduct{}
	if err = randomize.Struct(seed, &o, keepaProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert KeepaProduct: %s", err)
	}

	count, err := KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, keepaProductDBTypes, false, keepaProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize KeepaProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert KeepaProduct: %s", err)
	}

	count, err = KeepaProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
