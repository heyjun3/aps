// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMWSProducts(t *testing.T) {
	t.Parallel()

	query := MWSProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMWSProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMWSProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MWSProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMWSProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MWSProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMWSProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MWSProductExists(ctx, tx, o.Asin, o.Filename)
	if err != nil {
		t.Errorf("Unable to check if MWSProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MWSProductExists to return true, but got false.")
	}
}

func testMWSProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mwsProductFound, err := FindMWSProduct(ctx, tx, o.Asin, o.Filename)
	if err != nil {
		t.Error(err)
	}

	if mwsProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMWSProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MWSProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMWSProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MWSProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMWSProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mwsProductOne := &MWSProduct{}
	mwsProductTwo := &MWSProduct{}
	if err = randomize.Struct(seed, mwsProductOne, mwsProductDBTypes, false, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, mwsProductTwo, mwsProductDBTypes, false, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mwsProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mwsProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MWSProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMWSProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mwsProductOne := &MWSProduct{}
	mwsProductTwo := &MWSProduct{}
	if err = randomize.Struct(seed, mwsProductOne, mwsProductDBTypes, false, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, mwsProductTwo, mwsProductDBTypes, false, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mwsProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mwsProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mwsProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func mwsProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MWSProduct) error {
	*o = MWSProduct{}
	return nil
}

func testMWSProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MWSProduct{}
	o := &MWSProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mwsProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MWSProduct object: %s", err)
	}

	AddMWSProductHook(boil.BeforeInsertHook, mwsProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mwsProductBeforeInsertHooks = []MWSProductHook{}

	AddMWSProductHook(boil.AfterInsertHook, mwsProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mwsProductAfterInsertHooks = []MWSProductHook{}

	AddMWSProductHook(boil.AfterSelectHook, mwsProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mwsProductAfterSelectHooks = []MWSProductHook{}

	AddMWSProductHook(boil.BeforeUpdateHook, mwsProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mwsProductBeforeUpdateHooks = []MWSProductHook{}

	AddMWSProductHook(boil.AfterUpdateHook, mwsProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mwsProductAfterUpdateHooks = []MWSProductHook{}

	AddMWSProductHook(boil.BeforeDeleteHook, mwsProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mwsProductBeforeDeleteHooks = []MWSProductHook{}

	AddMWSProductHook(boil.AfterDeleteHook, mwsProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mwsProductAfterDeleteHooks = []MWSProductHook{}

	AddMWSProductHook(boil.BeforeUpsertHook, mwsProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mwsProductBeforeUpsertHooks = []MWSProductHook{}

	AddMWSProductHook(boil.AfterUpsertHook, mwsProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mwsProductAfterUpsertHooks = []MWSProductHook{}
}

func testMWSProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMWSProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mwsProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMWSProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMWSProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MWSProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMWSProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MWSProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mwsProductDBTypes = map[string]string{`Asin`: `character varying`, `Filename`: `character varying`, `Title`: `character varying`, `Jan`: `character varying`, `Unit`: `bigint`, `Price`: `bigint`, `Cost`: `bigint`, `FeeRate`: `double precision`, `ShippingFee`: `bigint`, `Profit`: `bigint`, `ProfitRate`: `double precision`, `CreatedAt`: `timestamp without time zone`, `URL`: `character varying`}
	_                 = bytes.MinRead
)

func testMWSProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mwsProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mwsProductAllColumns) == len(mwsProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMWSProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mwsProductAllColumns) == len(mwsProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MWSProduct{}
	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mwsProductDBTypes, true, mwsProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mwsProductAllColumns, mwsProductPrimaryKeyColumns) {
		fields = mwsProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			mwsProductAllColumns,
			mwsProductPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, mwsProductGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MWSProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMWSProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(mwsProductAllColumns) == len(mwsProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MWSProduct{}
	if err = randomize.Struct(seed, &o, mwsProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MWSProduct: %s", err)
	}

	count, err := MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mwsProductDBTypes, false, mwsProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MWSProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MWSProduct: %s", err)
	}

	count, err = MWSProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
