// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RakutenProduct is an object representing the database table.
type RakutenProduct struct {
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Jan         null.String `boil:"jan" json:"jan,omitempty" toml:"jan" yaml:"jan,omitempty"`
	Price       null.Int64  `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	ShopCode    string      `boil:"shop_code" json:"shop_code" toml:"shop_code" yaml:"shop_code"`
	ProductCode string      `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	URL         null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`

	R *rakutenProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rakutenProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RakutenProductColumns = struct {
	Name        string
	Jan         string
	Price       string
	ShopCode    string
	ProductCode string
	URL         string
}{
	Name:        "name",
	Jan:         "jan",
	Price:       "price",
	ShopCode:    "shop_code",
	ProductCode: "product_code",
	URL:         "url",
}

var RakutenProductTableColumns = struct {
	Name        string
	Jan         string
	Price       string
	ShopCode    string
	ProductCode string
	URL         string
}{
	Name:        "rakuten_products.name",
	Jan:         "rakuten_products.jan",
	Price:       "rakuten_products.price",
	ShopCode:    "rakuten_products.shop_code",
	ProductCode: "rakuten_products.product_code",
	URL:         "rakuten_products.url",
}

// Generated where

var RakutenProductWhere = struct {
	Name        whereHelpernull_String
	Jan         whereHelpernull_String
	Price       whereHelpernull_Int64
	ShopCode    whereHelperstring
	ProductCode whereHelperstring
	URL         whereHelpernull_String
}{
	Name:        whereHelpernull_String{field: "\"rakuten_products\".\"name\""},
	Jan:         whereHelpernull_String{field: "\"rakuten_products\".\"jan\""},
	Price:       whereHelpernull_Int64{field: "\"rakuten_products\".\"price\""},
	ShopCode:    whereHelperstring{field: "\"rakuten_products\".\"shop_code\""},
	ProductCode: whereHelperstring{field: "\"rakuten_products\".\"product_code\""},
	URL:         whereHelpernull_String{field: "\"rakuten_products\".\"url\""},
}

// RakutenProductRels is where relationship names are stored.
var RakutenProductRels = struct {
}{}

// rakutenProductR is where relationships are stored.
type rakutenProductR struct {
}

// NewStruct creates a new relationship struct
func (*rakutenProductR) NewStruct() *rakutenProductR {
	return &rakutenProductR{}
}

// rakutenProductL is where Load methods for each relationship are stored.
type rakutenProductL struct{}

var (
	rakutenProductAllColumns            = []string{"name", "jan", "price", "shop_code", "product_code", "url"}
	rakutenProductColumnsWithoutDefault = []string{"shop_code", "product_code"}
	rakutenProductColumnsWithDefault    = []string{"name", "jan", "price", "url"}
	rakutenProductPrimaryKeyColumns     = []string{"shop_code", "product_code"}
	rakutenProductGeneratedColumns      = []string{}
)

type (
	// RakutenProductSlice is an alias for a slice of pointers to RakutenProduct.
	// This should almost always be used instead of []RakutenProduct.
	RakutenProductSlice []*RakutenProduct
	// RakutenProductHook is the signature for custom RakutenProduct hook methods
	RakutenProductHook func(context.Context, boil.ContextExecutor, *RakutenProduct) error

	rakutenProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rakutenProductType                 = reflect.TypeOf(&RakutenProduct{})
	rakutenProductMapping              = queries.MakeStructMapping(rakutenProductType)
	rakutenProductPrimaryKeyMapping, _ = queries.BindMapping(rakutenProductType, rakutenProductMapping, rakutenProductPrimaryKeyColumns)
	rakutenProductInsertCacheMut       sync.RWMutex
	rakutenProductInsertCache          = make(map[string]insertCache)
	rakutenProductUpdateCacheMut       sync.RWMutex
	rakutenProductUpdateCache          = make(map[string]updateCache)
	rakutenProductUpsertCacheMut       sync.RWMutex
	rakutenProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rakutenProductAfterSelectHooks []RakutenProductHook

var rakutenProductBeforeInsertHooks []RakutenProductHook
var rakutenProductAfterInsertHooks []RakutenProductHook

var rakutenProductBeforeUpdateHooks []RakutenProductHook
var rakutenProductAfterUpdateHooks []RakutenProductHook

var rakutenProductBeforeDeleteHooks []RakutenProductHook
var rakutenProductAfterDeleteHooks []RakutenProductHook

var rakutenProductBeforeUpsertHooks []RakutenProductHook
var rakutenProductAfterUpsertHooks []RakutenProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RakutenProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RakutenProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RakutenProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RakutenProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RakutenProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RakutenProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RakutenProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RakutenProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RakutenProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rakutenProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRakutenProductHook registers your hook function for all future operations.
func AddRakutenProductHook(hookPoint boil.HookPoint, rakutenProductHook RakutenProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		rakutenProductAfterSelectHooks = append(rakutenProductAfterSelectHooks, rakutenProductHook)
	case boil.BeforeInsertHook:
		rakutenProductBeforeInsertHooks = append(rakutenProductBeforeInsertHooks, rakutenProductHook)
	case boil.AfterInsertHook:
		rakutenProductAfterInsertHooks = append(rakutenProductAfterInsertHooks, rakutenProductHook)
	case boil.BeforeUpdateHook:
		rakutenProductBeforeUpdateHooks = append(rakutenProductBeforeUpdateHooks, rakutenProductHook)
	case boil.AfterUpdateHook:
		rakutenProductAfterUpdateHooks = append(rakutenProductAfterUpdateHooks, rakutenProductHook)
	case boil.BeforeDeleteHook:
		rakutenProductBeforeDeleteHooks = append(rakutenProductBeforeDeleteHooks, rakutenProductHook)
	case boil.AfterDeleteHook:
		rakutenProductAfterDeleteHooks = append(rakutenProductAfterDeleteHooks, rakutenProductHook)
	case boil.BeforeUpsertHook:
		rakutenProductBeforeUpsertHooks = append(rakutenProductBeforeUpsertHooks, rakutenProductHook)
	case boil.AfterUpsertHook:
		rakutenProductAfterUpsertHooks = append(rakutenProductAfterUpsertHooks, rakutenProductHook)
	}
}

// One returns a single rakutenProduct record from the query.
func (q rakutenProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RakutenProduct, error) {
	o := &RakutenProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rakuten_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RakutenProduct records from the query.
func (q rakutenProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (RakutenProductSlice, error) {
	var o []*RakutenProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RakutenProduct slice")
	}

	if len(rakutenProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RakutenProduct records in the query.
func (q rakutenProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rakuten_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rakutenProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rakuten_products exists")
	}

	return count > 0, nil
}

// RakutenProducts retrieves all the records using an executor.
func RakutenProducts(mods ...qm.QueryMod) rakutenProductQuery {
	mods = append(mods, qm.From("\"rakuten_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rakuten_products\".*"})
	}

	return rakutenProductQuery{q}
}

// FindRakutenProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRakutenProduct(ctx context.Context, exec boil.ContextExecutor, shopCode string, productCode string, selectCols ...string) (*RakutenProduct, error) {
	rakutenProductObj := &RakutenProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rakuten_products\" where \"shop_code\"=$1 AND \"product_code\"=$2", sel,
	)

	q := queries.Raw(query, shopCode, productCode)

	err := q.Bind(ctx, exec, rakutenProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rakuten_products")
	}

	if err = rakutenProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rakutenProductObj, err
	}

	return rakutenProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RakutenProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rakuten_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rakutenProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rakutenProductInsertCacheMut.RLock()
	cache, cached := rakutenProductInsertCache[key]
	rakutenProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rakutenProductAllColumns,
			rakutenProductColumnsWithDefault,
			rakutenProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rakutenProductType, rakutenProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rakutenProductType, rakutenProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rakuten_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rakuten_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rakuten_products")
	}

	if !cached {
		rakutenProductInsertCacheMut.Lock()
		rakutenProductInsertCache[key] = cache
		rakutenProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RakutenProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RakutenProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rakutenProductUpdateCacheMut.RLock()
	cache, cached := rakutenProductUpdateCache[key]
	rakutenProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rakutenProductAllColumns,
			rakutenProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rakuten_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rakuten_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rakutenProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rakutenProductType, rakutenProductMapping, append(wl, rakutenProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rakuten_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rakuten_products")
	}

	if !cached {
		rakutenProductUpdateCacheMut.Lock()
		rakutenProductUpdateCache[key] = cache
		rakutenProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rakutenProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rakuten_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rakuten_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RakutenProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rakutenProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rakuten_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rakutenProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rakutenProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rakutenProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RakutenProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rakuten_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rakutenProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rakutenProductUpsertCacheMut.RLock()
	cache, cached := rakutenProductUpsertCache[key]
	rakutenProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rakutenProductAllColumns,
			rakutenProductColumnsWithDefault,
			rakutenProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rakutenProductAllColumns,
			rakutenProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rakuten_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rakutenProductPrimaryKeyColumns))
			copy(conflict, rakutenProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rakuten_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(rakutenProductType, rakutenProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rakutenProductType, rakutenProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rakuten_products")
	}

	if !cached {
		rakutenProductUpsertCacheMut.Lock()
		rakutenProductUpsertCache[key] = cache
		rakutenProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RakutenProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RakutenProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RakutenProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rakutenProductPrimaryKeyMapping)
	sql := "DELETE FROM \"rakuten_products\" WHERE \"shop_code\"=$1 AND \"product_code\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rakuten_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rakuten_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rakutenProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rakutenProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rakuten_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rakuten_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RakutenProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rakutenProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rakutenProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rakuten_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rakutenProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rakutenProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rakuten_products")
	}

	if len(rakutenProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RakutenProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRakutenProduct(ctx, exec, o.ShopCode, o.ProductCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RakutenProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RakutenProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rakutenProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rakuten_products\".* FROM \"rakuten_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rakutenProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RakutenProductSlice")
	}

	*o = slice

	return nil
}

// RakutenProductExists checks if the RakutenProduct row exists.
func RakutenProductExists(ctx context.Context, exec boil.ContextExecutor, shopCode string, productCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rakuten_products\" where \"shop_code\"=$1 AND \"product_code\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, shopCode, productCode)
	}
	row := exec.QueryRowContext(ctx, sql, shopCode, productCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rakuten_products exists")
	}

	return exists, nil
}

// Exists checks if the RakutenProduct row exists.
func (o *RakutenProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RakutenProductExists(ctx, exec, o.ShopCode, o.ProductCode)
}
