// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRakutenProducts(t *testing.T) {
	t.Parallel()

	query := RakutenProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRakutenProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRakutenProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RakutenProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRakutenProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RakutenProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRakutenProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RakutenProductExists(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Errorf("Unable to check if RakutenProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RakutenProductExists to return true, but got false.")
	}
}

func testRakutenProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rakutenProductFound, err := FindRakutenProduct(ctx, tx, o.ShopCode, o.ProductCode)
	if err != nil {
		t.Error(err)
	}

	if rakutenProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRakutenProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RakutenProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRakutenProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RakutenProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRakutenProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rakutenProductOne := &RakutenProduct{}
	rakutenProductTwo := &RakutenProduct{}
	if err = randomize.Struct(seed, rakutenProductOne, rakutenProductDBTypes, false, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, rakutenProductTwo, rakutenProductDBTypes, false, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rakutenProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rakutenProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RakutenProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRakutenProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rakutenProductOne := &RakutenProduct{}
	rakutenProductTwo := &RakutenProduct{}
	if err = randomize.Struct(seed, rakutenProductOne, rakutenProductDBTypes, false, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, rakutenProductTwo, rakutenProductDBTypes, false, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rakutenProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rakutenProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rakutenProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func rakutenProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RakutenProduct) error {
	*o = RakutenProduct{}
	return nil
}

func testRakutenProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RakutenProduct{}
	o := &RakutenProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RakutenProduct object: %s", err)
	}

	AddRakutenProductHook(boil.BeforeInsertHook, rakutenProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rakutenProductBeforeInsertHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.AfterInsertHook, rakutenProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rakutenProductAfterInsertHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.AfterSelectHook, rakutenProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rakutenProductAfterSelectHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.BeforeUpdateHook, rakutenProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rakutenProductBeforeUpdateHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.AfterUpdateHook, rakutenProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rakutenProductAfterUpdateHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.BeforeDeleteHook, rakutenProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rakutenProductBeforeDeleteHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.AfterDeleteHook, rakutenProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rakutenProductAfterDeleteHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.BeforeUpsertHook, rakutenProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rakutenProductBeforeUpsertHooks = []RakutenProductHook{}

	AddRakutenProductHook(boil.AfterUpsertHook, rakutenProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rakutenProductAfterUpsertHooks = []RakutenProductHook{}
}

func testRakutenProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRakutenProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rakutenProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRakutenProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRakutenProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RakutenProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRakutenProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RakutenProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rakutenProductDBTypes = map[string]string{`Name`: `character varying`, `Jan`: `character varying`, `Price`: `bigint`, `ShopCode`: `character varying`, `ProductCode`: `character varying`, `URL`: `character varying`}
	_                     = bytes.MinRead
)

func testRakutenProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rakutenProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rakutenProductAllColumns) == len(rakutenProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRakutenProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rakutenProductAllColumns) == len(rakutenProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RakutenProduct{}
	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rakutenProductDBTypes, true, rakutenProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rakutenProductAllColumns, rakutenProductPrimaryKeyColumns) {
		fields = rakutenProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			rakutenProductAllColumns,
			rakutenProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RakutenProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRakutenProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(rakutenProductAllColumns) == len(rakutenProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RakutenProduct{}
	if err = randomize.Struct(seed, &o, rakutenProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RakutenProduct: %s", err)
	}

	count, err := RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rakutenProductDBTypes, false, rakutenProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RakutenProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RakutenProduct: %s", err)
	}

	count, err = RakutenProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
