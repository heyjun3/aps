// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pc4uProduct is an object representing the database table.
type Pc4uProduct struct {
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Jan         null.String `boil:"jan" json:"jan,omitempty" toml:"jan" yaml:"jan,omitempty"`
	Price       null.Int64  `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	ShopCode    string      `boil:"shop_code" json:"shop_code" toml:"shop_code" yaml:"shop_code"`
	ProductCode string      `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	URL         null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`

	R *pc4uProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pc4uProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Pc4uProductColumns = struct {
	Name        string
	Jan         string
	Price       string
	ShopCode    string
	ProductCode string
	URL         string
}{
	Name:        "name",
	Jan:         "jan",
	Price:       "price",
	ShopCode:    "shop_code",
	ProductCode: "product_code",
	URL:         "url",
}

var Pc4uProductTableColumns = struct {
	Name        string
	Jan         string
	Price       string
	ShopCode    string
	ProductCode string
	URL         string
}{
	Name:        "pc4u_products.name",
	Jan:         "pc4u_products.jan",
	Price:       "pc4u_products.price",
	ShopCode:    "pc4u_products.shop_code",
	ProductCode: "pc4u_products.product_code",
	URL:         "pc4u_products.url",
}

// Generated where

var Pc4uProductWhere = struct {
	Name        whereHelpernull_String
	Jan         whereHelpernull_String
	Price       whereHelpernull_Int64
	ShopCode    whereHelperstring
	ProductCode whereHelperstring
	URL         whereHelpernull_String
}{
	Name:        whereHelpernull_String{field: "\"pc4u_products\".\"name\""},
	Jan:         whereHelpernull_String{field: "\"pc4u_products\".\"jan\""},
	Price:       whereHelpernull_Int64{field: "\"pc4u_products\".\"price\""},
	ShopCode:    whereHelperstring{field: "\"pc4u_products\".\"shop_code\""},
	ProductCode: whereHelperstring{field: "\"pc4u_products\".\"product_code\""},
	URL:         whereHelpernull_String{field: "\"pc4u_products\".\"url\""},
}

// Pc4uProductRels is where relationship names are stored.
var Pc4uProductRels = struct {
}{}

// pc4uProductR is where relationships are stored.
type pc4uProductR struct {
}

// NewStruct creates a new relationship struct
func (*pc4uProductR) NewStruct() *pc4uProductR {
	return &pc4uProductR{}
}

// pc4uProductL is where Load methods for each relationship are stored.
type pc4uProductL struct{}

var (
	pc4uProductAllColumns            = []string{"name", "jan", "price", "shop_code", "product_code", "url"}
	pc4uProductColumnsWithoutDefault = []string{"shop_code", "product_code"}
	pc4uProductColumnsWithDefault    = []string{"name", "jan", "price", "url"}
	pc4uProductPrimaryKeyColumns     = []string{"shop_code", "product_code"}
	pc4uProductGeneratedColumns      = []string{}
)

type (
	// Pc4uProductSlice is an alias for a slice of pointers to Pc4uProduct.
	// This should almost always be used instead of []Pc4uProduct.
	Pc4uProductSlice []*Pc4uProduct
	// Pc4uProductHook is the signature for custom Pc4uProduct hook methods
	Pc4uProductHook func(context.Context, boil.ContextExecutor, *Pc4uProduct) error

	pc4uProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pc4uProductType                 = reflect.TypeOf(&Pc4uProduct{})
	pc4uProductMapping              = queries.MakeStructMapping(pc4uProductType)
	pc4uProductPrimaryKeyMapping, _ = queries.BindMapping(pc4uProductType, pc4uProductMapping, pc4uProductPrimaryKeyColumns)
	pc4uProductInsertCacheMut       sync.RWMutex
	pc4uProductInsertCache          = make(map[string]insertCache)
	pc4uProductUpdateCacheMut       sync.RWMutex
	pc4uProductUpdateCache          = make(map[string]updateCache)
	pc4uProductUpsertCacheMut       sync.RWMutex
	pc4uProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pc4uProductAfterSelectHooks []Pc4uProductHook

var pc4uProductBeforeInsertHooks []Pc4uProductHook
var pc4uProductAfterInsertHooks []Pc4uProductHook

var pc4uProductBeforeUpdateHooks []Pc4uProductHook
var pc4uProductAfterUpdateHooks []Pc4uProductHook

var pc4uProductBeforeDeleteHooks []Pc4uProductHook
var pc4uProductAfterDeleteHooks []Pc4uProductHook

var pc4uProductBeforeUpsertHooks []Pc4uProductHook
var pc4uProductAfterUpsertHooks []Pc4uProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pc4uProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pc4uProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pc4uProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pc4uProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pc4uProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pc4uProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pc4uProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pc4uProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pc4uProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pc4uProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPc4uProductHook registers your hook function for all future operations.
func AddPc4uProductHook(hookPoint boil.HookPoint, pc4uProductHook Pc4uProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pc4uProductAfterSelectHooks = append(pc4uProductAfterSelectHooks, pc4uProductHook)
	case boil.BeforeInsertHook:
		pc4uProductBeforeInsertHooks = append(pc4uProductBeforeInsertHooks, pc4uProductHook)
	case boil.AfterInsertHook:
		pc4uProductAfterInsertHooks = append(pc4uProductAfterInsertHooks, pc4uProductHook)
	case boil.BeforeUpdateHook:
		pc4uProductBeforeUpdateHooks = append(pc4uProductBeforeUpdateHooks, pc4uProductHook)
	case boil.AfterUpdateHook:
		pc4uProductAfterUpdateHooks = append(pc4uProductAfterUpdateHooks, pc4uProductHook)
	case boil.BeforeDeleteHook:
		pc4uProductBeforeDeleteHooks = append(pc4uProductBeforeDeleteHooks, pc4uProductHook)
	case boil.AfterDeleteHook:
		pc4uProductAfterDeleteHooks = append(pc4uProductAfterDeleteHooks, pc4uProductHook)
	case boil.BeforeUpsertHook:
		pc4uProductBeforeUpsertHooks = append(pc4uProductBeforeUpsertHooks, pc4uProductHook)
	case boil.AfterUpsertHook:
		pc4uProductAfterUpsertHooks = append(pc4uProductAfterUpsertHooks, pc4uProductHook)
	}
}

// One returns a single pc4uProduct record from the query.
func (q pc4uProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pc4uProduct, error) {
	o := &Pc4uProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pc4u_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pc4uProduct records from the query.
func (q pc4uProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (Pc4uProductSlice, error) {
	var o []*Pc4uProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pc4uProduct slice")
	}

	if len(pc4uProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pc4uProduct records in the query.
func (q pc4uProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pc4u_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pc4uProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pc4u_products exists")
	}

	return count > 0, nil
}

// Pc4uProducts retrieves all the records using an executor.
func Pc4uProducts(mods ...qm.QueryMod) pc4uProductQuery {
	mods = append(mods, qm.From("\"pc4u_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pc4u_products\".*"})
	}

	return pc4uProductQuery{q}
}

// FindPc4uProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPc4uProduct(ctx context.Context, exec boil.ContextExecutor, shopCode string, productCode string, selectCols ...string) (*Pc4uProduct, error) {
	pc4uProductObj := &Pc4uProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pc4u_products\" where \"shop_code\"=$1 AND \"product_code\"=$2", sel,
	)

	q := queries.Raw(query, shopCode, productCode)

	err := q.Bind(ctx, exec, pc4uProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pc4u_products")
	}

	if err = pc4uProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pc4uProductObj, err
	}

	return pc4uProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pc4uProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pc4u_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pc4uProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pc4uProductInsertCacheMut.RLock()
	cache, cached := pc4uProductInsertCache[key]
	pc4uProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pc4uProductAllColumns,
			pc4uProductColumnsWithDefault,
			pc4uProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pc4uProductType, pc4uProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pc4uProductType, pc4uProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pc4u_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pc4u_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pc4u_products")
	}

	if !cached {
		pc4uProductInsertCacheMut.Lock()
		pc4uProductInsertCache[key] = cache
		pc4uProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Pc4uProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pc4uProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pc4uProductUpdateCacheMut.RLock()
	cache, cached := pc4uProductUpdateCache[key]
	pc4uProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pc4uProductAllColumns,
			pc4uProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pc4u_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pc4u_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pc4uProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pc4uProductType, pc4uProductMapping, append(wl, pc4uProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pc4u_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pc4u_products")
	}

	if !cached {
		pc4uProductUpdateCacheMut.Lock()
		pc4uProductUpdateCache[key] = cache
		pc4uProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pc4uProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pc4u_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pc4u_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Pc4uProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pc4uProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pc4u_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pc4uProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pc4uProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pc4uProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pc4uProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pc4u_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pc4uProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pc4uProductUpsertCacheMut.RLock()
	cache, cached := pc4uProductUpsertCache[key]
	pc4uProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pc4uProductAllColumns,
			pc4uProductColumnsWithDefault,
			pc4uProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pc4uProductAllColumns,
			pc4uProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pc4u_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pc4uProductPrimaryKeyColumns))
			copy(conflict, pc4uProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pc4u_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pc4uProductType, pc4uProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pc4uProductType, pc4uProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pc4u_products")
	}

	if !cached {
		pc4uProductUpsertCacheMut.Lock()
		pc4uProductUpsertCache[key] = cache
		pc4uProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Pc4uProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pc4uProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pc4uProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pc4uProductPrimaryKeyMapping)
	sql := "DELETE FROM \"pc4u_products\" WHERE \"shop_code\"=$1 AND \"product_code\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pc4u_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pc4u_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pc4uProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pc4uProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pc4u_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pc4u_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Pc4uProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pc4uProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pc4uProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pc4u_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pc4uProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pc4uProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pc4u_products")
	}

	if len(pc4uProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pc4uProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPc4uProduct(ctx, exec, o.ShopCode, o.ProductCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Pc4uProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Pc4uProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pc4uProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pc4u_products\".* FROM \"pc4u_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pc4uProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in Pc4uProductSlice")
	}

	*o = slice

	return nil
}

// Pc4uProductExists checks if the Pc4uProduct row exists.
func Pc4uProductExists(ctx context.Context, exec boil.ContextExecutor, shopCode string, productCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pc4u_products\" where \"shop_code\"=$1 AND \"product_code\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, shopCode, productCode)
	}
	row := exec.QueryRowContext(ctx, sql, shopCode, productCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pc4u_products exists")
	}

	return exists, nil
}

// Exists checks if the Pc4uProduct row exists.
func (o *Pc4uProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return Pc4uProductExists(ctx, exec, o.ShopCode, o.ProductCode)
}
