// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSuperProductDetails(t *testing.T) {
	t.Parallel()

	query := SuperProductDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSuperProductDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuperProductDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SuperProductDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuperProductDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SuperProductDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuperProductDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SuperProductDetailExists(ctx, tx, o.ProductCode, o.SetNumber)
	if err != nil {
		t.Errorf("Unable to check if SuperProductDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SuperProductDetailExists to return true, but got false.")
	}
}

func testSuperProductDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	superProductDetailFound, err := FindSuperProductDetail(ctx, tx, o.ProductCode, o.SetNumber)
	if err != nil {
		t.Error(err)
	}

	if superProductDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSuperProductDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SuperProductDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSuperProductDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SuperProductDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSuperProductDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	superProductDetailOne := &SuperProductDetail{}
	superProductDetailTwo := &SuperProductDetail{}
	if err = randomize.Struct(seed, superProductDetailOne, superProductDetailDBTypes, false, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, superProductDetailTwo, superProductDetailDBTypes, false, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = superProductDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = superProductDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SuperProductDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSuperProductDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	superProductDetailOne := &SuperProductDetail{}
	superProductDetailTwo := &SuperProductDetail{}
	if err = randomize.Struct(seed, superProductDetailOne, superProductDetailDBTypes, false, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, superProductDetailTwo, superProductDetailDBTypes, false, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = superProductDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = superProductDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func superProductDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func superProductDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SuperProductDetail) error {
	*o = SuperProductDetail{}
	return nil
}

func testSuperProductDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SuperProductDetail{}
	o := &SuperProductDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail object: %s", err)
	}

	AddSuperProductDetailHook(boil.BeforeInsertHook, superProductDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	superProductDetailBeforeInsertHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.AfterInsertHook, superProductDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	superProductDetailAfterInsertHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.AfterSelectHook, superProductDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	superProductDetailAfterSelectHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.BeforeUpdateHook, superProductDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	superProductDetailBeforeUpdateHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.AfterUpdateHook, superProductDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	superProductDetailAfterUpdateHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.BeforeDeleteHook, superProductDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	superProductDetailBeforeDeleteHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.AfterDeleteHook, superProductDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	superProductDetailAfterDeleteHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.BeforeUpsertHook, superProductDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	superProductDetailBeforeUpsertHooks = []SuperProductDetailHook{}

	AddSuperProductDetailHook(boil.AfterUpsertHook, superProductDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	superProductDetailAfterUpsertHooks = []SuperProductDetailHook{}
}

func testSuperProductDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSuperProductDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(superProductDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSuperProductDetailToOneSuperProductUsingProductCodeSuperProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SuperProductDetail
	var foreign SuperProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, superProductDetailDBTypes, false, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, superProductDBTypes, false, superProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductCode = foreign.ProductCode
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductCodeSuperProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ProductCode != foreign.ProductCode {
		t.Errorf("want: %v, got %v", foreign.ProductCode, check.ProductCode)
	}

	ranAfterSelectHook := false
	AddSuperProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *SuperProduct) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SuperProductDetailSlice{&local}
	if err = local.L.LoadProductCodeSuperProduct(ctx, tx, false, (*[]*SuperProductDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductCodeSuperProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductCodeSuperProduct = nil
	if err = local.L.LoadProductCodeSuperProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductCodeSuperProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSuperProductDetailToOneSetOpSuperProductUsingProductCodeSuperProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SuperProductDetail
	var b, c SuperProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, superProductDetailDBTypes, false, strmangle.SetComplement(superProductDetailPrimaryKeyColumns, superProductDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, superProductDBTypes, false, strmangle.SetComplement(superProductPrimaryKeyColumns, superProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, superProductDBTypes, false, strmangle.SetComplement(superProductPrimaryKeyColumns, superProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SuperProduct{&b, &c} {
		err = a.SetProductCodeSuperProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductCodeSuperProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductCodeSuperProductDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductCode != x.ProductCode {
			t.Error("foreign key was wrong value", a.ProductCode)
		}

		if exists, err := SuperProductDetailExists(ctx, tx, a.ProductCode, a.SetNumber); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testSuperProductDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSuperProductDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SuperProductDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSuperProductDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SuperProductDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	superProductDetailDBTypes = map[string]string{`ProductCode`: `character varying`, `SetNumber`: `integer`, `ShopCode`: `character varying`, `Price`: `bigint`, `Jan`: `character varying`}
	_                         = bytes.MinRead
)

func testSuperProductDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(superProductDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(superProductDetailAllColumns) == len(superProductDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSuperProductDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(superProductDetailAllColumns) == len(superProductDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SuperProductDetail{}
	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, superProductDetailDBTypes, true, superProductDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(superProductDetailAllColumns, superProductDetailPrimaryKeyColumns) {
		fields = superProductDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			superProductDetailAllColumns,
			superProductDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SuperProductDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSuperProductDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(superProductDetailAllColumns) == len(superProductDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SuperProductDetail{}
	if err = randomize.Struct(seed, &o, superProductDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SuperProductDetail: %s", err)
	}

	count, err := SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, superProductDetailDBTypes, false, superProductDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SuperProductDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SuperProductDetail: %s", err)
	}

	count, err = SuperProductDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
