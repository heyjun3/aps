// Code generated by MockGen. DO NOT EDIT.
// Source: mq.go

// Package mock_ikebe is a generated GoMock package.
package mock_ikebe

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp091_go "github.com/rabbitmq/amqp091-go"
)

// MockRabbitMQClient is a mock of RabbitMQClient interface.
type MockRabbitMQClient struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQClientMockRecorder
}

// MockRabbitMQClientMockRecorder is the mock recorder for MockRabbitMQClient.
type MockRabbitMQClientMockRecorder struct {
	mock *MockRabbitMQClient
}

// NewMockRabbitMQClient creates a new mock instance.
func NewMockRabbitMQClient(ctrl *gomock.Controller) *MockRabbitMQClient {
	mock := &MockRabbitMQClient{ctrl: ctrl}
	mock.recorder = &MockRabbitMQClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQClient) EXPECT() *MockRabbitMQClientMockRecorder {
	return m.recorder
}

// batchPublish mocks base method.
func (m *MockRabbitMQClient) batchPublish(arg0 [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "batchPublish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// batchPublish indicates an expected call of batchPublish.
func (mr *MockRabbitMQClientMockRecorder) batchPublish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "batchPublish", reflect.TypeOf((*MockRabbitMQClient)(nil).batchPublish), arg0)
}

// createMQConnection mocks base method.
func (m *MockRabbitMQClient) createMQConnection() (*amqp091_go.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createMQConnection")
	ret0, _ := ret[0].(*amqp091_go.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createMQConnection indicates an expected call of createMQConnection.
func (mr *MockRabbitMQClientMockRecorder) createMQConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createMQConnection", reflect.TypeOf((*MockRabbitMQClient)(nil).createMQConnection))
}

// publish mocks base method.
func (m *MockRabbitMQClient) publish(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// publish indicates an expected call of publish.
func (mr *MockRabbitMQClientMockRecorder) publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "publish", reflect.TypeOf((*MockRabbitMQClient)(nil).publish), arg0)
}
