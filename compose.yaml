version: "3.9"

x-logging: &default-logging
  options:
    max-size: "10m"
    max-file: "5"
  driver: json-file

volumes:
  mongo_db_store:
  rabbitmq_store:
  pg_store:
  pg_store_16:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local

services:
  front:
    build:
      context: .
      dockerfile: ./services/front/Dockerfile
      args:
        APP_PATH: "services/front/"
    logging: *default-logging
    container_name: front
    restart: always
    ports:
      - 80:80
    tty: true
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api-server

  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: rabbitmq
    logging: *default-logging
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - TZ=Asia/Tokyo
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - type: volume
        source: rabbitmq_store
        target: /var/lib/rabbitmq

  redis-server:
    build:
      context: .
      dockerfile: ./docker/redis/Dockerfile
    logging: *default-logging
    container_name: redis-server
    restart: always
    environment:
      - TZ=Asia/Tokyo
    ports:
      - 6379:6379

  postgresql-server:
    build:
      context: .
      dockerfile: ./docker/postgresql16/Dockerfile
    logging: *default-logging
    container_name: postgresql-server
    restart: always
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - 5432:5432
    environment:
      - TZ=Asia/Tokyo
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - type: volume
        source: pg_store_16
        target: /var/lib/postgresql/data

  spapi-queue-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: spapi-queue-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i queue
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-search-item-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: spapi-search-item-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i catalog_item
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-price-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: spapi-price-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i price
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-price-server-v2:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: spapi-price-server-v2
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i price_v2
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-fees-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: spapi-fees-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i fees
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-chart-request-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: spapi-chart-request-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py spapi -i request
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server

  spapi-chart-db-server:
    build:
      context: .
      dockerfile: ./services/api-server/Dockerfile
      args:
        APP_PATH: "services/api-server"
    logging: *default-logging
    container_name: spapi-chart-db-server
    restart: always
    entrypoint: /app/consumer
    environment:
      - TZ=Asia/Tokyo
      - DB_DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql-server:5432/${POSTGRES_DB}?sslmode=disable
      - MQ_DSN=amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:5672
    depends_on:
      - postgresql-server
      - redis-server

  crawler:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: crawler
    restart: always
    entrypoint: tail -f /dev/null
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  keepa-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: keepa-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py keepa
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server

  go-crawler:
    build:
      context: .
      dockerfile: ./services/crawler/Dockerfile
      args:
        APP_PATH: "services/crawler"
    logging: *default-logging
    container_name: go-crawler
    restart: always
    environment:
      - TZ=Asia/Tokyo
      - DB_DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql-server:5432/${POSTGRES_DB}?sslmode=disable
      - MQ_DSN=amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:5672
      - HOST=go-crawler
    command: /app/server

  api-server:
    build:
      context: .
      dockerfile: ./services/api-server/Dockerfile
      args:
        APP_PATH: "services/api-server"
    logging: *default-logging
    container_name: api-server
    restart: always
    environment:
      - TZ=Asia/Tokyo
      - DB_DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql-server:5432/${POSTGRES_DB}?sslmode=disable
      - MQ_DSN=amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:5672
      - SHOP_SERVICE_URL=http://go-crawler:8080
      - SPAPI_SERVICE_URL=http://spapi-server:8000
    command: /app/server
    depends_on:
      - postgresql-server

  spapi-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    logging: *default-logging
    container_name: spapi-server
    restart: always
    environment:
      - TZ=Asia/Tokyo
    entrypoint: uvicorn server:app --host spapi-server

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    logging: *default-logging
    container_name: setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    mem_limit: ${MEM_LIMIT}

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    logging: *default-logging
    container_name: es01
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - ./:/etc/elasticsearch
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - discovery.seed_hosts=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    logging: *default-logging
    container_name: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
