version: "3.9"

volumes:
  mongo_db_store:
  rabbitmq_store:
  pg_store:
  pg_store_2:

services:
  front:
    build:
      context: .
      dockerfile: ./services/front/Dockerfile
      args:
        APP_PATH: "services/front/"
    container_name: front
    restart: always
    ports:
     - 80:80
    tty: true
    stdin_open: true
    environment:
     - CHOKIDAR_USEPOLLING=true
    depends_on:
     - api-server
  
  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - TZ=Asia/Tokyo
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - type: volume
        source: rabbitmq_store
        target: /var/lib/rabbitmq

  redis-server:
    build:
      context: .
      dockerfile: ./docker/redis/Dockerfile
    container_name: redis-server
    restart: always
    environment:
      - TZ=Asia/Tokyo
    ports:
      - 6379:6379

  postgresql-server:
    build:
      context: .
      dockerfile: ./docker/postgresql/Dockerfile
    container_name: postgresql-server
    restart: always
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - 5432:5432
    environment:
      - TZ=Asia/Tokyo
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - type: volume
        source: pg_store_2
        target: /var/lib/postgresql/data
        
  spapi-queue-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-queue-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i queue
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-search-item-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-search-item-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i catalog_item
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-price-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-price-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i price
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-price-server-v2:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-price-server-v2
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i price_v2
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-fees-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-fees-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz -i fees
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-chart-request-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-chart-request-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py spapi -i request
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server

  spapi-chart-db-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-chart-db-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py spapi -i db
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server

  crawler:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: crawler
    restart: always
    entrypoint: tail -f /dev/null
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  keepa-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: keepa-server
    restart: always
    entrypoint: /usr/local/bin/python /usr/src/app/main.py keepa
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server

  go-crawler:
    build:
      context: .
      dockerfile: ./services/crawler/Dockerfile
      args:
        APP_PATH: "services/crawler"
    container_name: go-crawler
    restart: always
    environment:
      - TZ=Asia/Tokyo
      - DB_DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql-server:5432/${POSTGRES_DB}?sslmode=disable
      - MQ_DSN=amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:5672
      - HOST=go-crawler
    command: /app/server

  api-server:
    build:
      context: .
      dockerfile: ./services/api-server/Dockerfile
      args:
        APP_PATH: "services/api-server"
    container_name: api-server
    restart: always
    environment:
      - TZ=Asia/Tokyo
      - DB_DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql-server:5432/${POSTGRES_DB}?sslmode=disable
      - SHOP_SERVICE_URL=http://go-crawler:8080
    command: /app/server
    depends_on:
      - postgresql-server
