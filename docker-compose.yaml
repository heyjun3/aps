version: '3.9'

volumes:
  mongo_db_store:
  rabbitmq_store:
  pg_store:

services:
  mongo:
    build:
      context: .
      dockerfile: ./docker/mongo/Dockerfile
    container_name: mongo_db
    restart: always
    environment:
      TZ: Asia/Tokyo
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - type: volume
        source: mongo_db_store
        target: /data/db
      - type: volume
        source: mongo_db_store
        target: /data/configdb

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - 8081:8081
    environment:
      TZ: Asia/Tokyo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo

  fluentd:
    build:
      context: .
      dockerfile: ./docker/fluentd/Dockerfile
    container_name: fluentd
    environment:
      TZ: Asia/Tokyo
    ports:
      - 9880:9880
  
  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - TZ=Asia/Tokyo
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - type: volume
        source: rabbitmq_store
        target: /var/lib/rabbitmq

  redis-server:
    build:
      context: .
      dockerfile: ./docker/redis/Dockerfile
    container_name: redis-server
    environment:
      - TZ=Asia/Tokyo
    ports:
      - 6379:6379
  
  postgresql-server:
    build:
      context: .
      dockerfile: ./docker/postgresql/Dockerfile
    container_name: postgresql-server
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - 5432:5432
    environment:
      - TZ=Asia/Tokyo
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - type: volume
        source: pg_store
        target: /var/lib/postgresql/data

  uwsgi:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: uwsgi
    environment:
      - TZ=Asia/Tokyo
    ports:
      - 5000:5000
    entrypoint: uwsgi --ini ./ApiServer.ini
    depends_on:
      - postgresql-server

  spapi-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-server
    entrypoint: /usr/local/bin/python /usr/src/app/main.py amz
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  spapi-chart-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: spapi-chart-server
    entrypoint: /usr/local/bin/python /usr/src/app/main.py spapi
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server

  scheduler:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: scheduler
    entrypoint: /usr/local/bin/python /usr/src/app/scheduler.py
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
      - rabbitmq

  keepa-server:
    build:
      context: .
      dockerfile: ./docker/python/Dockerfile
    container_name: keepa-server
    entrypoint: /usr/local/bin/python /usr/src/app/main.py keepa
    environment:
      - TZ=Asia/Tokyo
    depends_on:
      - postgresql-server
      - redis-server
